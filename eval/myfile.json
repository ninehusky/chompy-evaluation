{"ruleset":["(&& ?a ?b) ==> (&& ?b ?a)","(&& ?b ?a) ==> (&& ?a ?b)","(|| ?a ?b) ==> (|| ?b ?a)","(|| ?b ?a) ==> (|| ?a ?b)","(|| ?a ?a) ==> (&& ?a ?a)","(&& ?a ?a) ==> (|| ?a ?a)","(|| ?a ?a) ==> (! (! ?a))","(! (! ?a)) ==> (|| ?a ?a)","(&& ?a ?a) ==> (&& ?a 1)","(&& ?a 1) ==> (&& ?a ?a)","(|| ?a ?a) ==> (|| ?a 0)","(|| ?a 0) ==> (|| ?a ?a)","(&& ?a 0) ==> 0","(|| ?a 1) ==> 1","(|| ?a (! ?a)) ==> (! 0)","(&& ?a (! ?a)) ==> (! 1)","(|| ?a (! ?a)) ==> 1","(&& ?a (! ?a)) ==> 0","(! (&& ?a ?a)) ==> (! ?a)","(! ?a) ==> (! (&& ?a ?a))","(! (&& ?b ?a)) ==> (|| (! ?b) (! ?a))","(|| (! ?b) (! ?a)) ==> (! (&& ?b ?a))","(! (&& ?b (! ?a))) ==> (|| ?a (! ?b))","(|| ?a (! ?b)) ==> (! (&& ?b (! ?a)))","(! (|| ?b (! ?a))) ==> (&& ?a (! ?b))","(&& ?a (! ?b)) ==> (! (|| ?b (! ?a)))","(|| ?b (&& ?b ?a)) ==> (&& ?b ?b)","(&& ?b (|| ?b ?a)) ==> (&& ?b ?b)","(&& ?a (&& ?b ?a)) ==> (&& ?b ?a)","(&& ?b ?a) ==> (&& ?a (&& ?b ?a))","(|| ?b (|| ?b ?a)) ==> (|| ?b ?a)","(|| ?b ?a) ==> (|| ?b (|| ?b ?a))","(&& ?c (&& ?b ?a)) ==> (&& ?a (&& ?c ?b))","(&& ?a (&& ?c ?b)) ==> (&& ?c (&& ?b ?a))","(|| ?c (|| ?b ?a)) ==> (|| ?a (|| ?b ?c))","(|| ?a (|| ?b ?c)) ==> (|| ?c (|| ?b ?a))","(- 0 ?a) ==> (* ?a -1)","(* ?a -1) ==> (- 0 ?a)","(- ?a 1) ==> (+ -1 ?a)","(+ -1 ?a) ==> (- ?a 1)","(- ?a -1) ==> (+ 1 ?a)","(+ 1 ?a) ==> (- ?a -1)","(- ?a ?a) ==> (* 0 ?a)","(* 0 ?a) ==> (- ?a ?a)","?a ==> (- ?a 0)","(- ?a 0) ==> ?a","?a ==> (+ 0 ?a)","(+ 0 ?a) ==> ?a","?a ==> (* 1 ?a)","(* 1 ?a) ==> ?a","(- ?a ?a) ==> 0","?a ==> (max ?a ?a)","(max ?a ?a) ==> ?a","?a ==> (min ?a ?a)","(min ?a ?a) ==> ?a","(min ?b ?a) ==> (min ?a ?b)","(min ?a ?b) ==> (min ?b ?a)","(+ ?b ?a) ==> (+ ?a ?b)","(+ ?a ?b) ==> (+ ?b ?a)","(* ?b ?a) ==> (* ?a ?b)","(* ?a ?b) ==> (* ?b ?a)","(max ?b ?a) ==> (max ?a ?b)","(max ?a ?b) ==> (max ?b ?a)","(max -1 (- 0 ?a)) ==> (- 0 (min ?a 1))","(- 0 (min ?a 1)) ==> (max -1 (- 0 ?a))","(min -1 (- 0 ?a)) ==> (- 0 (max ?a 1))","(- 0 (max ?a 1)) ==> (min -1 (- 0 ?a))","(max 1 (- 0 ?a)) ==> (- 0 (min ?a -1))","(- 0 (min ?a -1)) ==> (max 1 (- 0 ?a))","(min 1 (- 0 ?a)) ==> (- 0 (max ?a -1))","(- 0 (max ?a -1)) ==> (min 1 (- 0 ?a))","(max -1 (min ?a 0)) ==> (min 0 (max ?a -1))","(min 0 (max ?a -1)) ==> (max -1 (min ?a 0))","(min 1 (max ?a 0)) ==> (max 0 (min ?a 1))","(max 0 (min ?a 1)) ==> (min 1 (max ?a 0))","(max -1 (min ?a 1)) ==> (min 1 (max ?a -1))","(min 1 (max ?a -1)) ==> (max -1 (min ?a 1))","(min 0 (max ?a 1)) ==> (min (* ?a ?a) 0)","(min (* ?a ?a) 0) ==> (min 0 (max ?a 1))","(* ?a (min 0 1)) ==> (min (* ?a ?a) 0)","(min (* ?a ?a) 0) ==> (* ?a (min 0 1))","(min (* ?a ?a) 0) ==> (min 0 1)","(min -1 (max ?a 1)) ==> -1","(min -1 (max ?a 0)) ==> -1","(min (* ?a ?a) -1) ==> -1","(max ?a (* ?a ?a)) ==> (max (* ?a ?a) 0)","(max (* ?a ?a) 0) ==> (max ?a (* ?a ?a))","(max (* ?a ?a) 0) ==> (* ?a ?a)","(* ?a ?a) ==> (max (* ?a ?a) 0)","(min ?b (max ?b ?a)) ==> (* ?b (max -1 1))","(- (- ?a ?b) ?a) ==> (* ?b (min -1 1))","(max ?a (min ?a ?b)) ==> (max ?a (+ ?a -1))","(min ?b (- ?b ?a)) ==> (- ?b (max ?a 0))","(- ?b (max ?a 0)) ==> (min ?b (- ?b ?a))","(- ?b (min ?a 0)) ==> (max ?b (- ?b ?a))","(max ?b (- ?b ?a)) ==> (- ?b (min ?a 0))","(- (* ?a ?b) ?a) ==> (* ?a (+ ?b -1))","(* ?a (+ ?b -1)) ==> (- (* ?a ?b) ?a)","(min (- ?b ?a) 0) ==> (- ?b (max ?a ?b))","(- ?b (max ?a ?b)) ==> (min (- ?b ?a) 0)","(max (- ?b ?a) 0) ==> (- (max ?a ?b) ?a)","(- (max ?a ?b) ?a) ==> (max (- ?b ?a) 0)","(- (min ?a ?b) ?a) ==> (min (- ?b ?a) 0)","(min (- ?b ?a) 0) ==> (- (min ?a ?b) ?a)","(+ ?b (max ?a 0)) ==> (max ?b (+ ?b ?a))","(max ?b (+ ?b ?a)) ==> (+ ?b (max ?a 0))","(* ?b (+ ?a 1)) ==> (+ ?b (* ?a ?b))","(+ ?b (* ?a ?b)) ==> (* ?b (+ ?a 1))","(+ ?b (min ?a 0)) ==> (min ?b (+ ?a ?b))","(min ?b (+ ?a ?b)) ==> (+ ?b (min ?a 0))","(- ?b (* ?b ?a)) ==> (* ?b (- 1 ?a))","(* ?b (- 1 ?a)) ==> (- ?b (* ?b ?a))","(max ?a (min ?a ?b)) ==> (min ?a (* ?a ?a))","(- (max ?a ?b) ?a) ==> (- ?b (min ?a ?b))","(- ?b (min ?a ?b)) ==> (- (max ?a ?b) ?a)","(* ?b (+ ?a ?a)) ==> (* ?a (+ ?b ?b))","(* ?a (+ ?b ?b)) ==> (* ?b (+ ?a ?a))","(max ?a (min ?b ?a)) ==> ?a","(min ?b (max ?b ?a)) ==> ?b","(- (+ ?c ?b) ?a) ==> (- ?b (- ?a ?c))","(- ?b (- ?a ?c)) ==> (- (+ ?c ?b) ?a)","(- ?c (+ ?b ?a)) ==> (- (- ?c ?a) ?b)","(- (- ?c ?a) ?b) ==> (- ?c (+ ?b ?a))","(- (- ?c ?b) ?a) ==> (- (- ?c ?a) ?b)","(- (- ?c ?a) ?b) ==> (- (- ?c ?b) ?a)","(+ ?c (+ ?b ?a)) ==> (+ ?a (+ ?b ?c))","(+ ?a (+ ?b ?c)) ==> (+ ?c (+ ?b ?a))","(* ?b (* ?a ?c)) ==> (* ?c (* ?b ?a))","(* ?c (* ?b ?a)) ==> (* ?b (* ?a ?c))","(min ?b (min ?a ?c)) ==> (min ?c (min ?b ?a))","(min ?c (min ?b ?a)) ==> (min ?b (min ?a ?c))","(max ?b (max ?a ?c)) ==> (max ?c (max ?b ?a))","(max ?c (max ?b ?a)) ==> (max ?b (max ?a ?c))","(- ?a (- ?b ?c)) ==> (- ?c (- ?b ?a))","(- ?c (- ?b ?a)) ==> (- ?a (- ?b ?c))","(+ ?a (min ?a -1)) ==> (max (- ?a 1) 1) if (<= 2 ?a)","(min (* ?a ?a) 1) ==> (* (max ?a -1) -1) if (< ?a 1)","(max (* ?a -1) ?a) ==> (max ?a (+ 1 1)) if (<= 2 ?a)","(max (- -1 ?a) ?a) ==> (max ?a (+ 1 1)) if (<= 2 ?a)","(max (* ?a ?a) 1) ==> (* (min ?a -1) ?a) if (< ?a 0)","(max ?a (* -1 ?a)) ==> (* (max ?a -1) ?a) if (< ?a 2)","(max (+ ?a ?a) 1) ==> (+ (max ?a 1) ?a) if (<= 0 ?a)","(min ?a (- 1 ?a)) ==> (- (min ?a 1) ?a) if (<= 0 ?a)","(max (+ -1 -1) ?a) ==> (max ?a (+ 1 1)) if (<= 2 ?a)","(max ?a (- 1 ?a)) ==> (max (- 1 ?a) 1) if (< ?a 2)","(max 1 (+ ?a ?a)) ==> (max (+ 1 ?a) 1) if (< ?a 2)","(* (max ?a 0) ?a) ==> (max (* ?a ?a) 1) if (<= 1 ?a)","(+ (min ?a -1) ?a) ==> (min -1 (+ ?a ?a)) if (< ?a 1)","(max ?a (- -1 ?a)) ==> (- (max ?a -1) ?a) if (< ?a 1)","(min ?a 1) ==> (min (+ 1 1) ?a) if (< ?a 2)","(min ?a 1) ==> (min 1 (* ?a ?a)) if (<= 0 ?a)","(min ?a 1) ==> (min (+ ?a ?a) 1) if (<= 0 ?a)","(- ?a 1) ==> (max (- ?a 1) 1) if (<= 2 ?a)","(- ?a 1) ==> (min (- ?a 1) 1) if (<= ?a 2)","(max ?a 1) ==> (max ?a (- 1 ?a)) if (<= 0 ?a)","(min ?a -1) ==> (min ?a (- -1 ?a)) if (< ?a 1)","(max ?a -1) ==> (max -1 (+ ?a ?a)) if (< ?a 1)","(min (+ ?a ?a) 1) ==> (min (+ ?a ?a) ?a) if (< ?a 2)","(* ?a ?a) ==> (* ?a (max ?a 1)) if (<= 0 ?a)","(* ?a ?a) ==> (* (min ?a -1) ?a) if (< ?a 1)","(* ?a ?a) ==> (max (* ?a ?a) 1) if (!= 0 ?a)","(max ?b (min ?a 1)) ==> (max (+ 1 1) ?b) if (<= 2 ?b)","(min (max ?b 1) ?a) ==> (* ?a (max ?a 1)) if (< ?a 2)","(max ?a (min ?b 1)) ==> (max ?a (+ 1 1)) if (<= 2 ?a)","(max ?b (min ?a -1)) ==> (max (+ 1 1) ?b) if (<= 2 ?b)","(min ?b (max ?a 1)) ==> (* ?b (max ?b 1)) if (< ?b 2)","(max ?b (min ?a 0)) ==> (max (+ 1 1) ?b) if (<= 2 ?b)","(max ?b (min ?a 0)) ==> (max ?b (- 1 ?b)) if (<= 1 ?b)","(max ?b (min ?a 1)) ==> (min 1 (max ?b ?a)) if (< ?b 2)","(max (min ?a -1) ?b) ==> (min -1 (max ?b ?a)) if (< ?b 0)","(max ?a (min ?b -1)) ==> (min -1 (max ?b ?a)) if (< ?a 0)","(min (max ?a ?b) 0) ==> (max ?b (min ?a 0)) if (< ?b 1)","(min (max ?a ?b) 0) ==> (max (min ?b 0) ?a) if (< ?a 1)","(min (max ?a ?b) 1) ==> (max (min ?b 1) ?a) if (< ?a 2)","(max ?a (min ?b 0)) ==> (max ?a 1) if (<= 1 ?a)","(max ?b (min ?a -1)) ==> (max ?b 1) if (<= 1 ?b)","(+ ?a (- ?b ?a)) ==> (* ?b (min ?b 1)) if (<= 0 ?b)","(+ ?b (- ?a ?a)) ==> (* ?b (min ?b 1)) if (<= 0 ?b)","(- ?b (+ ?b ?a)) ==> (* ?a (max ?a -1)) if (< ?a 1)","(+ ?a (- ?b ?a)) ==> (max ?b (+ 1 1)) if (<= 2 ?b)","(- ?a (+ ?b ?a)) ==> (max ?b (- 0 ?b)) if (< ?b 1)","(max ?b (- ?a ?a)) ==> (* ?b (max ?b 0)) if (< ?b 2)","(min ?b (- ?a ?a)) ==> (min (+ 1 1) ?b) if (< ?b 1)","(+ ?b (- ?a ?a)) ==> (max (+ 1 1) ?b) if (<= 2 ?b)","(- ?b (- ?b ?a)) ==> (max (+ 1 1) ?a) if (<= 2 ?a)","(+ ?b (- ?a ?a)) ==> (min (+ 1 1) ?b) if (<= ?b 2)","(- ?b (- ?b ?a)) ==> (min (+ 1 1) ?a) if (<= ?a 2)","(- ?b (- ?b ?a)) ==> (* ?a (min ?a 1)) if (<= 0 ?a)","(min ?a (max ?b 0)) ==> (max (+ ?a ?a) ?a) if (< ?a 1)","(min ?b (* ?a ?a)) ==> (min ?b (- -1 ?b)) if (< ?b 0)","(max ?b (min ?a -1)) ==> (min (+ ?b ?b) ?b) if (<= 0 ?b)","(min (max ?a -1) ?b) ==> (min ?b (- ?a -1)) if (<= ?b ?a)","(max ?a (min ?b 0)) ==> (min (+ ?a ?a) ?a) if (<= 0 ?a)","(max ?a (min ?b -1)) ==> (min ?a (+ ?a ?a)) if (<= 0 ?a)","(min ?b (- ?a ?a)) ==> (min (- 1 ?b) ?b) if (< ?b 2)","(min ?a (+ ?b -1)) ==> (min (+ 1 ?b) ?a) if (< ?a ?b)","(min ?a (+ 1 ?b)) ==> (+ (min ?b ?a) 1) if (< ?b ?a)","(max ?a (+ 1 ?b)) ==> (+ 1 (max ?b ?a)) if (<= ?a ?b)","(min (+ ?a 1) ?b) ==> (+ 1 ?a) if (< ?a ?b)","(max (+ -1 ?a) ?b) ==> (+ -1 ?a) if (< ?b ?a)","(max (+ ?b -1) ?a) ==> (+ -1 ?b) if (< ?a ?b)","(+ ?b ?a) ==> (+ (min ?a 1) ?b) if (< ?a 2)","(+ ?b ?a) ==> (+ ?a (min ?b 1)) if (< ?b 2)","(+ ?b ?a) ==> (+ ?a (min ?b -1)) if (< ?b 0)","(+ ?b ?a) ==> (+ (min ?a -1) ?b) if (< ?a 0)","(+ ?b ?a) ==> (+ ?b (max ?a 1)) if (<= 1 ?a)","(+ ?b ?a) ==> (+ ?a (max ?b 1)) if (<= 1 ?b)","(min ?b (* ?a ?a)) ==> (max (+ ?b ?b) ?b) if (< ?b 1)","(min ?a (+ ?b -1)) ==> (min (* ?b ?b) ?a) if (< ?a ?b)","(min (- ?a 1) ?b) ==> (min ?b (* ?a ?a)) if (< ?b ?a)","(min (- ?b ?a) 1) ==> (- (min ?a ?b) ?a) if (<= ?b ?a)","(min ?b ?a) ==> (min ?b (+ ?a 1)) if (<= ?b ?a)","(- ?b ?a) ==> (min -1 (- ?b ?a)) if (< ?b ?a)","(- ?b ?a) ==> (max 1 (- ?b ?a)) if (< ?a ?b)","(+ ?b ?a) ==> (min ?b (+ ?a ?b)) if (< ?a 1)","(+ ?b ?a) ==> (min ?a (+ ?b ?a)) if (< ?b 1)","(+ ?b ?a) ==> (max ?b (+ ?b ?a)) if (<= 0 ?a)","(- ?a ?b) ==> (min (- ?a ?b) ?a) if (<= 0 ?b)","(min ?c (max ?b ?a)) ==> (min ?c (- ?b 1)) if (< ?c ?b)","(min (max ?c ?b) ?a) ==> (min ?a (- ?c 1)) if (< ?a ?c)","(min ?b (max ?a ?c)) ==> (min ?b (- ?a 1)) if (< ?b ?a)","(min ?a (max ?b ?c)) ==> (min (+ ?b -1) ?a) if (< ?a ?b)","(max ?c (min ?b ?a)) ==> (max (+ 1 ?b) ?c) if (< ?b ?c)","(max (min ?c ?b) ?a) ==> (max (+ 1 ?c) ?a) if (< ?c ?a)","(max (min ?c ?a) ?b) ==> (min ?c (max ?b ?a)) if (<= ?b ?c)","(min ?b (max ?c ?a)) ==> (max ?c (min ?b ?a)) if (<= ?c ?b)","(max (min ?a ?c) ?b) ==> (min (max ?c ?b) ?a) if (<= ?b ?a)","(max (min ?c ?b) ?a) ==> (min ?c (max ?b ?a)) if (<= ?a ?c)","(min (max ?c ?b) ?a) ==> (max ?c (min ?b ?a)) if (<= ?c ?a)","(min (max ?a ?c) ?b) ==> (max (min ?c ?b) ?a) if (<= ?a ?b)","(+ ?c (max ?b ?a)) ==> (+ ?c ?b) if (<= ?a ?b)","(+ (min ?c ?b) ?a) ==> (+ ?b ?a) if (<= ?b ?c)","(+ (max ?c ?a) ?b) ==> (+ ?b ?a) if (<= ?c ?a)","(+ ?a (max ?c ?b)) ==> (+ ?b ?a) if (<= ?c ?b)","(- ?c (max ?b ?a)) ==> (- ?c ?a) if (<= ?b ?a)","(- ?b (min ?c ?a)) ==> (- ?b ?a) if (<= ?a ?c)","(<= ?a -1) ==> (< ?a 0)","(< ?a 0) ==> (<= ?a -1)","(< ?a 1) ==> (<= ?a 0)","(<= ?a 0) ==> (< ?a 1)","(<= 0 ?a) ==> (< -1 ?a)","(< -1 ?a) ==> (<= 0 ?a)","(<= 1 ?a) ==> (< 0 ?a)","(< 0 ?a) ==> (<= 1 ?a)","(!= ?a ?a) ==> 0","(<= ?a ?a) ==> 1","(< ?a ?a) ==> (!= ?a ?a)","(!= ?a ?a) ==> (< ?a ?a)","(== ?a ?a) ==> (<= ?a ?a)","(<= ?a ?a) ==> (== ?a ?a)","(!= ?b ?a) ==> (!= ?a ?b)","(!= ?a ?b) ==> (!= ?b ?a)","(== ?b ?a) ==> (== ?a ?b)","(== ?a ?b) ==> (== ?b ?a)","(== ?a (< -1 1)) ==> (== ?a (< -1 ?a))","(== ?a (< -1 ?a)) ==> (== ?a (< -1 1))","(== ?a (<= -1 1)) ==> (== ?a (<= -1 ?a))","(== ?a (<= -1 ?a)) ==> (== ?a (<= -1 1))","(== ?a (< 0 -1)) ==> (== ?a (== ?a -1))","(== ?a (== ?a -1)) ==> (== ?a (< 0 -1))","(== ?a (== ?a -1)) ==> (== ?a (< 1 -1))","(== ?a (< 1 -1)) ==> (== ?a (== ?a -1))","(!= ?a (!= -1 1)) ==> (!= ?a (!= ?a -1))","(!= ?a (!= ?a -1)) ==> (!= ?a (!= -1 1))","(== ?a (== ?a 1)) ==> (== ?a (!= ?a 0))","(== ?a (!= ?a 0)) ==> (== ?a (== ?a 1))","(== ?a (== ?a 1)) ==> (== ?a (< 0 ?a))","(== ?a (< 0 ?a)) ==> (== ?a (== ?a 1))","(== ?a 1) ==> (== ?a (< -1 ?a))","(== ?a (< -1 ?a)) ==> (== ?a 1)","(== ?a 1) ==> (== ?a (<= ?a 1))","(== ?a (<= ?a 1)) ==> (== ?a 1)","(== ?a 1) ==> (== ?a (<= -1 ?a))","(== ?a (<= -1 ?a)) ==> (== ?a 1)","(== ?a 0) ==> (== ?a (< ?a 0))","(== ?a (< ?a 0)) ==> (== ?a 0)","(== ?a 0) ==> (== ?a (< 1 ?a))","(== ?a (< 1 ?a)) ==> (== ?a 0)","(== ?a 0) ==> (== ?a (< ?a -1))","(== ?a (< ?a -1)) ==> (== ?a 0)","(!= ?a (!= ?a -1)) ==> (!= ?a 1)","(!= ?a 1) ==> (!= ?a (!= ?a -1))","(== ?a 0) ==> (== ?a (== ?a -1))","(== ?a (== ?a -1)) ==> (== ?a 0)","(< -1 (!= ?a ?b)) ==> (!= ?a (< ?a 1))","(== (== ?a ?b) -1) ==> (== ?a (== ?a 0))","(!= (!= ?b ?a) -1) ==> (!= ?a (!= ?a 1))","(!= (< ?b ?a) -1) ==> 1","(== (== ?b ?a) -1) ==> 0","(!= (!= ?b ?a) -1) ==> 1","(<= -1 (<= ?b ?a)) ==> 1","(<= (<= ?b ?a) 1) ==> 1","(< ?b (< -1 ?a)) ==> (< ?b (<= ?b ?a))","(< ?b (<= ?b ?a)) ==> (< ?b (< -1 ?a))","(< ?a (<= ?b ?a)) ==> (< ?a (< ?b 1))","(< ?a (< ?b 1)) ==> (< ?a (<= ?b ?a))","(<= ?b (== ?a 1)) ==> (<= ?b (== ?a ?b))","(<= ?b (== ?a ?b)) ==> (<= ?b (== ?a 1))","(< ?b (== ?a 0)) ==> (< ?b (== ?a ?b))","(< ?b (== ?a ?b)) ==> (< ?b (== ?a 0))","(< (!= ?b 1) ?a) ==> (< (!= ?b ?a) ?a)","(< (!= ?b ?a) ?a) ==> (< (!= ?b 1) ?a)","(< ?a (!= ?b ?a)) ==> (< ?a (!= ?b 0))","(< ?a (!= ?b 0)) ==> (< ?a (!= ?b ?a))","(< (< ?b ?a) ?a) ==> (< (< ?b 1) ?a)","(< (< ?b 1) ?a) ==> (< (< ?b ?a) ?a)","(< ?b (< ?b ?a)) ==> (< ?b (< 0 ?a))","(< ?b (< 0 ?a)) ==> (< ?b (< ?b ?a))","(<= ?b (<= ?a 1)) ==> (<= ?b (<= ?a ?b))","(<= ?b (<= ?a ?b)) ==> (<= ?b (<= ?a 1))","(< (< 1 ?b) ?a) ==> (< (< ?a ?b) ?a)","(< (< ?a ?b) ?a) ==> (< (< 1 ?b) ?a)","(< ?a (< ?b ?a)) ==> (< ?a (< ?b 0))","(< ?a (< ?b 0)) ==> (< ?a (< ?b ?a))","(<= ?b ?a) ==> (!= (< ?a ?b) 1)","(!= (< ?a ?b) 1) ==> (<= ?b ?a)","(< 0 (== ?b ?a)) ==> (== ?b ?a)","(== ?b ?a) ==> (< 0 (== ?b ?a))","(!= (<= ?b ?a) 0) ==> (<= ?b ?a)","(<= ?b ?a) ==> (!= (<= ?b ?a) 0)","(<= ?b ?a) ==> (< (< ?a ?b) 1)","(< (< ?a ?b) 1) ==> (<= ?b ?a)","(< 0 (!= ?b ?a)) ==> (!= ?b ?a)","(!= ?b ?a) ==> (< 0 (!= ?b ?a))","(== (== ?b ?a) 0) ==> (!= ?b ?a)","(!= ?b ?a) ==> (== (== ?b ?a) 0)","(!= (== ?b ?a) 1) ==> (!= ?b ?a)","(!= ?b ?a) ==> (!= (== ?b ?a) 1)","(== (!= ?b ?a) 1) ==> (!= ?b ?a)","(!= ?b ?a) ==> (== (!= ?b ?a) 1)","(< ?b ?a) ==> (< (<= ?a ?b) 1)","(< (<= ?a ?b) 1) ==> (< ?b ?a)","(== (== ?b ?a) 1) ==> (== ?b ?a)","(== ?b ?a) ==> (== (== ?b ?a) 1)","(< 0 (< ?b ?a)) ==> (< ?b ?a)","(< ?b ?a) ==> (< 0 (< ?b ?a))","(!= (!= ?b ?a) 0) ==> (!= ?b ?a)","(!= ?b ?a) ==> (!= (!= ?b ?a) 0)","(<= (<= ?b ?b) ?a) ==> (!= ?a (!= ?a ?a)) if (<= 0 ?a)","(<= ?a (== ?b ?b)) ==> (== ?a (== ?a ?a)) if (<= 1 ?a)","(<= ?b (!= ?a ?a)) ==> (!= ?b (<= ?b ?b)) if (<= ?b 1)","(<= ?b ?a) ==> (< ?b ?a) if (!= ?a ?b)","(<= ?a ?b) ==> (== ?b ?a) if (<= ?b ?a)","(<= (< ?b ?c) ?a) ==> (<= (<= ?c ?b) ?a) if (!= 0 ?a)","(<= ?c (< ?a ?b)) ==> (<= ?c (<= ?b ?a)) if (!= 1 ?c)","(|| ?a -1) ==> 1","(&& ?a ?a) ==> (&& ?a -1)","(&& ?a -1) ==> (&& ?a ?a)","(== ?a 0) ==> (! ?a)","(! ?a) ==> (== ?a 0)","(min (! ?a) 0) ==> (! (min ?a -1))","(! (min ?a -1)) ==> (min (! ?a) 0)","(! (min ?a 0)) ==> (< -1 ?a)","(< -1 ?a) ==> (! (min ?a 0))","(<= ?a 0) ==> (! (max ?a 0))","(! (max ?a 0)) ==> (<= ?a 0)","(! (max ?a 1)) ==> (* ?a (! ?a))","(* ?a (! ?a)) ==> (! (max ?a 1))","(* ?a (! ?a)) ==> (! (min ?a -1))","(! (min ?a -1)) ==> (* ?a (! ?a))","(&& ?a ?a) ==> (- 1 (! ?a))","(- 1 (! ?a)) ==> (&& ?a ?a)","(min ?a (! ?a)) ==> (min ?a 0)","(min ?a 0) ==> (min ?a (! ?a))","(min (! ?a) 1) ==> (! ?a)","(! ?a) ==> (min (! ?a) 1)","(! (max ?a -1)) ==> (! ?a)","(! ?a) ==> (! (max ?a -1))","(! (min ?a 1)) ==> (! ?a)","(! ?a) ==> (! (min ?a 1))","(max (! ?a) 0) ==> (! ?a)","(! ?a) ==> (max (! ?a) 0)","(* ?a (! ?a)) ==> 0","(! (+ ?a ?a)) ==> (! ?a)","(! ?a) ==> (! (+ ?a ?a))","(! (* ?b ?a)) ==> (! (&& ?b ?a))","(! (&& ?b ?a)) ==> (! (* ?b ?a))","(! (!= ?b ?a)) ==> (== ?b ?a)","(== ?b ?a) ==> (! (!= ?b ?a))","(! (- ?b ?a)) ==> (== ?a ?b)","(== ?a ?b) ==> (! (- ?b ?a))","(<= ?b ?a) ==> (! (< ?a ?b))","(! (< ?a ?b)) ==> (<= ?b ?a)","(<= ?a 1) ==> (<= ?a (! ?a)) if (!= 1 ?a)","?a ==> (min ?a 1) if (< ?a 2)","(|| (! ?a) ?b) ==> (< ?b (! ?a)) if (< ?b 1)","(&& ?b ?a) ==> (|| (! ?a) ?b) if (!= 0 ?a)","(|| ?a ?b) ==> (<= (! ?b) ?a) if (<= 0 ?a)","(max ?b ?a) ==> ?b if (<= ?a ?b)"],"results":[{"expression":"( <= ( max ( + ( min ( min ( - ( / ( - ( min ( max ( min ( * v1 8 ) 2004 ) 5 ) ( + ( + v2 v3 ) 255 ) ) ( max ( * ( max ( min ( / v4 8 ) 249 ) 0 ) 8 ) 4 ) ) 252 ) 1 ) ( / ( - ( - ( + v2 v3 ) ( max ( * ( max ( min ( / v4 8 ) 249 ) 0 ) 8 ) 4 ) ) 248 ) 252 ) ) ( - ( + 0 ( / ( + v5 251 ) 252 ) ) 1 ) ) 1 ) ( min ( max ( / ( + ( - v3 ( max ( * ( max ( min ( / v4 8 ) 249 ) 0 ) 8 ) 4 ) ) 255 ) 252 ) 0 ) ( + ( / ( + v5 251 ) 252 ) 0 ) ) ) ( min ( max ( / ( + ( - v3 ( max ( * ( max ( min ( / v4 8 ) 249 ) 0 ) 8 ) 4 ) ) 255 ) 252 ) 0 ) ( + ( / ( + v5 251 ) 252 ) 0 ) ) )","chompy_result":{"index":1,"start_expression":"( <= ( max ( + ( min ( min ( - ( / ( - ( min ( max ( min ( * v1 8 ) 2004 ) 5 ) ( + ( + v2 v3 ) 255 ) ) ( max ( * ( max ( min ( / v4 8 ) 249 ) 0 ) 8 ) 4 ) ) 252 ) 1 ) ( / ( - ( - ( + v2 v3 ) ( max ( * ( max ( min ( / v4 8 ) 249 ) 0 ) 8 ) 4 ) ) 248 ) 252 ) ) ( - ( + 0 ( / ( + v5 251 ) 252 ) ) 1 ) ) 1 ) ( min ( max ( / ( + ( - v3 ( max ( * ( max ( min ( / v4 8 ) 249 ) 0 ) 8 ) 4 ) ) 255 ) 252 ) 0 ) ( + ( / ( + v5 251 ) 252 ) 0 ) ) ) ( min ( max ( / ( + ( - v3 ( max ( * ( max ( min ( / v4 8 ) 249 ) 0 ) 8 ) 4 ) ) 255 ) 252 ) 0 ) ( + ( / ( + v5 251 ) 252 ) 0 ) ) )","end_expression":"1/0","result":false,"best_expr":"(<= (max (+ 1 (min (+ -1 (/ (- (min (max (* v1 8) 5) (min 2004 (+ (- v2 -255) v3))) (max (* 8 (- (min (/ v4 8) 249) (min (/ v4 8) 0))) 4)) 252)) (min (/ (- (- v3 (- 248 v2)) (max (* 8 (- (min (/ v4 8) 249) (min (/ v4 8) 0))) 4)) 252) (+ -1 (/ (+ v5 251) 252))))) (min (/ (+ v5 251) 252) (max 0 (/ (- (+ v3 255) (max (* 8 (- (min (/ v4 8) 249) (min (/ v4 8) 0))) 4)) 252)))) (min (/ (+ v5 251) 252) (max 0 (/ (- (+ v3 255) (max (* 8 (- (min (/ v4 8) 249) (min (/ v4 8) 0))) 4)) 252))))","class":"../chompy-rules.txt","iterations":4,"egraph_size":2298,"rebuilds":11,"total_time":3.0926146659999993,"stop_reason":"Time Limit : 0.0100075","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":1,"start_expression":"( <= ( max ( + ( min ( min ( - ( / ( - ( min ( max ( min ( * v1 8 ) 2004 ) 5 ) ( + ( + v2 v3 ) 255 ) ) ( max ( * ( max ( min ( / v4 8 ) 249 ) 0 ) 8 ) 4 ) ) 252 ) 1 ) ( / ( - ( - ( + v2 v3 ) ( max ( * ( max ( min ( / v4 8 ) 249 ) 0 ) 8 ) 4 ) ) 248 ) 252 ) ) ( - ( + 0 ( / ( + v5 251 ) 252 ) ) 1 ) ) 1 ) ( min ( max ( / ( + ( - v3 ( max ( * ( max ( min ( / v4 8 ) 249 ) 0 ) 8 ) 4 ) ) 255 ) 252 ) 0 ) ( + ( / ( + v5 251 ) 252 ) 0 ) ) ) ( min ( max ( / ( + ( - v3 ( max ( * ( max ( min ( / v4 8 ) 249 ) 0 ) 8 ) 4 ) ) 255 ) 252 ) 0 ) ( + ( / ( + v5 251 ) 252 ) 0 ) ) )","end_expression":"1/0","result":false,"best_expr":"(<= (/ (min (+ (min (+ (min v2 (- 1749 v3)) (+ v3 3)) (+ -252 (max 5 (* 8 v1)))) (max (min -4 (* -8 (/ v4 8))) -1992)) (min (+ (+ v3 (+ v2 -248)) (* -8 (min (/ v4 8) 249))) (+ -248 (min (+ v5 247) (+ v3 (+ v2 -4)))))) 252) (+ -1 (max 0 (/ (+ (+ (* v3 -1) -255) (max 4 (min 1992 (- v4 (\"%\" v4 -8))))) -252))))","class":"CaviarAll","iterations":6,"egraph_size":9245,"rebuilds":182,"total_time":3.657848665000001,"stop_reason":"Time Limit : 0.010974542","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( != ( / ( + ( - v0 v1 ) 20 ) 9 ) 0 )","chompy_result":{"index":2,"start_expression":"( != ( / ( + ( - v0 v1 ) 20 ) 9 ) 0 )","end_expression":"1/0","result":false,"best_expr":"(!= (/ (+ (- v0 v1) 20) 9) 0)","class":"../chompy-rules.txt","iterations":6,"egraph_size":4996,"rebuilds":380,"total_time":3.0553714430000016,"stop_reason":"Time Limit : 0.010027709","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":2,"start_expression":"( != ( / ( + ( - v0 v1 ) 20 ) 9 ) 0 )","end_expression":"1/0","result":false,"best_expr":"(!= (/ (+ 20 (- v0 v1)) 9) 0)","class":"CaviarAll","iterations":11,"egraph_size":140,"rebuilds":55,"total_time":0.000795292,"stop_reason":"Saturation","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == ( * v0 2 ) ( - ( + ( * v0 2 ) ( + ( * ( - ( / ( min ( + ( * ( min ( / ( min ( + ( * v1 2 ) 1 ) v2 ) 2 ) v1 ) 2 ) 1 ) v2 ) 2 ) v1 ) 4 ) 8 ) ) 1 ) )","chompy_result":{"index":3,"start_expression":"( == ( * v0 2 ) ( - ( + ( * v0 2 ) ( + ( * ( - ( / ( min ( + ( * ( min ( / ( min ( + ( * v1 2 ) 1 ) v2 ) 2 ) v1 ) 2 ) 1 ) v2 ) 2 ) v1 ) 4 ) 8 ) ) 1 ) )","end_expression":"1/0","result":false,"best_expr":"(== (* (+ (- 0 v1) (/ (min v2 (+ 1 (* 2 (min v1 (/ (min v2 (+ 1 (* v1 2))) 2))))) 2)) 4) -7)","class":"../chompy-rules.txt","iterations":5,"egraph_size":3022,"rebuilds":46,"total_time":3.1150605570000054,"stop_reason":"Time Limit : 0.010000167","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":3,"start_expression":"( == ( * v0 2 ) ( - ( + ( * v0 2 ) ( + ( * ( - ( / ( min ( + ( * ( min ( / ( min ( + ( * v1 2 ) 1 ) v2 ) 2 ) v1 ) 2 ) 1 ) v2 ) 2 ) v1 ) 4 ) 8 ) ) 1 ) )","end_expression":"1/0","result":true,"best_expr":"0","class":"CaviarAll","iterations":6,"egraph_size":712,"rebuilds":143,"total_time":0.021446746,"stop_reason":"Goal 0 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == ( min ( max ( max ( - ( max ( min v0 2002 ) 3 ) 3 ) v1 ) ( + v2 v1 ) ) ( + ( + ( max ( min v0 2002 ) 3 ) v3 ) 3 ) ) ( min ( max ( max ( - ( max ( min v0 2002 ) 3 ) 3 ) v1 ) ( + v2 v1 ) ) ( + ( + ( max ( min v0 2002 ) 3 ) v3 ) 3 ) ) )","chompy_result":{"index":4,"start_expression":"( == ( min ( max ( max ( - ( max ( min v0 2002 ) 3 ) 3 ) v1 ) ( + v2 v1 ) ) ( + ( + ( max ( min v0 2002 ) 3 ) v3 ) 3 ) ) ( min ( max ( max ( - ( max ( min v0 2002 ) 3 ) 3 ) v1 ) ( + v2 v1 ) ) ( + ( + ( max ( min v0 2002 ) 3 ) v3 ) 3 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":237,"rebuilds":2,"total_time":0.000490918,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":4,"start_expression":"( == ( min ( max ( max ( - ( max ( min v0 2002 ) 3 ) 3 ) v1 ) ( + v2 v1 ) ) ( + ( + ( max ( min v0 2002 ) 3 ) v3 ) 3 ) ) ( min ( max ( max ( - ( max ( min v0 2002 ) 3 ) 3 ) v1 ) ( + v2 v1 ) ) ( + ( + ( max ( min v0 2002 ) 3 ) v3 ) 3 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":39,"rebuilds":0,"total_time":0.000044958,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( != ( + ( / ( - ( max v0 0 ) v1 ) 3 ) 3 ) 0 )","chompy_result":{"index":5,"start_expression":"( != ( + ( / ( - ( max v0 0 ) v1 ) 3 ) 3 ) 0 )","end_expression":"1/0","result":false,"best_expr":"(!= (/ (+ (max v0 0) (- 0 v1)) 3) -3)","class":"../chompy-rules.txt","iterations":6,"egraph_size":3406,"rebuilds":306,"total_time":3.074697046000004,"stop_reason":"Time Limit : 0.0100215","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":5,"start_expression":"( != ( + ( / ( - ( max v0 0 ) v1 ) 3 ) 3 ) 0 )","end_expression":"1/0","result":false,"best_expr":"(!= 3 (/ (+ (- 0 v1) (max 0 v0)) -3))","class":"CaviarAll","iterations":13,"egraph_size":5041,"rebuilds":1496,"total_time":3.10567963,"stop_reason":"Time Limit : 0.010005417","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 32 ) ( / ( - v1 8 ) 32 ) ) 36 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 32 ) ( / ( - v1 8 ) 32 ) ) 36 ) 1 ) )","chompy_result":{"index":6,"start_expression":"( == ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 32 ) ( / ( - v1 8 ) 32 ) ) 36 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 32 ) ( / ( - v1 8 ) 32 ) ) 36 ) 1 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":156,"rebuilds":2,"total_time":0.00040675,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":6,"start_expression":"( == ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 32 ) ( / ( - v1 8 ) 32 ) ) 36 ) 1 ) ( + ( / ( - ( / ( + ( + v0 v1 ) 39 ) 32 ) ( / ( - v1 8 ) 32 ) ) 36 ) 1 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":28,"rebuilds":0,"total_time":0.000037666,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( * v0 8 ) ( + ( * ( + ( / v1 8 ) ( * v2 63 ) ) 8 ) 485 ) ) ( min ( * v0 8 ) ( + ( * ( + ( / v1 8 ) ( * v2 63 ) ) 8 ) 485 ) ) )","chompy_result":{"index":7,"start_expression":"( == ( min ( * v0 8 ) ( + ( * ( + ( / v1 8 ) ( * v2 63 ) ) 8 ) 485 ) ) ( min ( * v0 8 ) ( + ( * ( + ( / v1 8 ) ( * v2 63 ) ) 8 ) 485 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":149,"rebuilds":2,"total_time":0.00041054199999999996,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":7,"start_expression":"( == ( min ( * v0 8 ) ( + ( * ( + ( / v1 8 ) ( * v2 63 ) ) 8 ) 485 ) ) ( min ( * v0 8 ) ( + ( * ( + ( / v1 8 ) ( * v2 63 ) ) 8 ) 485 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":25,"rebuilds":0,"total_time":0.00003325,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( - ( + ( * v0 8 ) ( * v1 33 ) ) ( min ( - ( * v2 8 ) ( * v3 65 ) ) ( + ( + ( min ( * v1 33 ) 32 ) ( * v0 8 ) ) 23 ) ) ) ( - ( + ( * v0 8 ) ( * v1 33 ) ) ( min ( - ( * v2 8 ) ( * v3 65 ) ) ( + ( + ( min ( * v1 33 ) 32 ) ( * v0 8 ) ) 23 ) ) ) )","chompy_result":{"index":8,"start_expression":"( == ( - ( + ( * v0 8 ) ( * v1 33 ) ) ( min ( - ( * v2 8 ) ( * v3 65 ) ) ( + ( + ( min ( * v1 33 ) 32 ) ( * v0 8 ) ) 23 ) ) ) ( - ( + ( * v0 8 ) ( * v1 33 ) ) ( min ( - ( * v2 8 ) ( * v3 65 ) ) ( + ( + ( min ( * v1 33 ) 32 ) ( * v0 8 ) ) 23 ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":250,"rebuilds":2,"total_time":0.000553667,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":8,"start_expression":"( == ( - ( + ( * v0 8 ) ( * v1 33 ) ) ( min ( - ( * v2 8 ) ( * v3 65 ) ) ( + ( + ( min ( * v1 33 ) 32 ) ( * v0 8 ) ) 23 ) ) ) ( - ( + ( * v0 8 ) ( * v1 33 ) ) ( min ( - ( * v2 8 ) ( * v3 65 ) ) ( + ( + ( min ( * v1 33 ) 32 ) ( * v0 8 ) ) 23 ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":39,"rebuilds":0,"total_time":0.000034665999999999996,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( max ( min ( + ( / v0 8 ) v1 ) 249 ) 0 ) ( + ( max ( min ( / v0 8 ) 256 ) 7 ) 114 ) ) ( min ( max ( min ( + ( / v0 8 ) v1 ) 249 ) 0 ) ( + ( max ( min ( / v0 8 ) 256 ) 7 ) 114 ) ) )","chompy_result":{"index":9,"start_expression":"( == ( min ( max ( min ( + ( / v0 8 ) v1 ) 249 ) 0 ) ( + ( max ( min ( / v0 8 ) 256 ) 7 ) 114 ) ) ( min ( max ( min ( + ( / v0 8 ) v1 ) 249 ) 0 ) ( + ( max ( min ( / v0 8 ) 256 ) 7 ) 114 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":188,"rebuilds":2,"total_time":0.000441917,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":9,"start_expression":"( == ( min ( max ( min ( + ( / v0 8 ) v1 ) 249 ) 0 ) ( + ( max ( min ( / v0 8 ) 256 ) 7 ) 114 ) ) ( min ( max ( min ( + ( / v0 8 ) v1 ) 249 ) 0 ) ( + ( max ( min ( / v0 8 ) 256 ) 7 ) 114 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":41,"rebuilds":0,"total_time":0.00003675,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( max ( min ( / ( + v0 v1 ) 8 ) 249 ) 0 ) ( * v2 4 ) ) ( + ( max ( min ( / ( + v0 v1 ) 8 ) 249 ) 0 ) ( * v2 4 ) ) )","chompy_result":{"index":10,"start_expression":"( == ( + ( max ( min ( / ( + v0 v1 ) 8 ) 249 ) 0 ) ( * v2 4 ) ) ( + ( max ( min ( / ( + v0 v1 ) 8 ) 249 ) 0 ) ( * v2 4 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":151,"rebuilds":2,"total_time":0.00039379,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":10,"start_expression":"( == ( + ( max ( min ( / ( + v0 v1 ) 8 ) 249 ) 0 ) ( * v2 4 ) ) ( + ( max ( min ( / ( + v0 v1 ) 8 ) 249 ) 0 ) ( * v2 4 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":26,"rebuilds":0,"total_time":0.000030583,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * v2 32 ) ) 31 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * v2 32 ) ) 31 ) ) )","chompy_result":{"index":11,"start_expression":"( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * v2 32 ) ) 31 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * v2 32 ) ) 31 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":180,"rebuilds":2,"total_time":0.000431374,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":11,"start_expression":"( == ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * v2 32 ) ) 31 ) ) ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) ( + ( + ( / v1 8 ) ( * v2 32 ) ) 31 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":27,"rebuilds":0,"total_time":0.000030418,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( >= ( - -15 ( max v0 -13 ) ) ( - ( + ( - -15 ( max v0 -13 ) ) ( + ( max v0 -13 ) 17 ) ) 1 ) )","chompy_result":{"index":12,"start_expression":"( >= ( - -15 ( max v0 -13 ) ) ( - ( + ( - -15 ( max v0 -13 ) ) ( + ( max v0 -13 ) 17 ) ) 1 ) )","end_expression":"1/0","result":false,"best_expr":"(>= (- -15 (max v0 -13)) 1)","class":"../chompy-rules.txt","iterations":7,"egraph_size":2669,"rebuilds":0,"total_time":3.082186842000002,"stop_reason":"Time Limit : 0.010003375","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":12,"start_expression":"( >= ( - -15 ( max v0 -13 ) ) ( - ( + ( - -15 ( max v0 -13 ) ) ( + ( max v0 -13 ) 17 ) ) 1 ) )","end_expression":"1/0","result":true,"best_expr":"0","class":"CaviarAll","iterations":5,"egraph_size":564,"rebuilds":110,"total_time":0.000709001,"stop_reason":"Goal 0 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == 0 ( - ( + 0 ( + ( * ( min ( - ( - ( max ( / ( + ( + v0 v1 ) 23 ) 8 ) 249 ) ( * v2 8 ) ) ( min ( / v1 8 ) 4 ) ) 3 ) 2 ) 10 ) ) 1 ) )","chompy_result":{"index":13,"start_expression":"( == 0 ( - ( + 0 ( + ( * ( min ( - ( - ( max ( / ( + ( + v0 v1 ) 23 ) 8 ) 249 ) ( * v2 8 ) ) ( min ( / v1 8 ) 4 ) ) 3 ) 2 ) 10 ) ) 1 ) )","end_expression":"1/0","result":false,"best_expr":"(== (* (min (- (max (/ (+ v0 (+ v1 23)) 8) 249) (+ (* 8 v2) (min (/ v1 8) 4))) 3) 2) -9)","class":"../chompy-rules.txt","iterations":5,"egraph_size":2325,"rebuilds":38,"total_time":3.0944282150000046,"stop_reason":"Time Limit : 0.010002541","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":13,"start_expression":"( == 0 ( - ( + 0 ( + ( * ( min ( - ( - ( max ( / ( + ( + v0 v1 ) 23 ) 8 ) 249 ) ( * v2 8 ) ) ( min ( / v1 8 ) 4 ) ) 3 ) 2 ) 10 ) ) 1 ) )","end_expression":"1/0","result":true,"best_expr":"0","class":"CaviarAll","iterations":4,"egraph_size":410,"rebuilds":16,"total_time":0.000381042,"stop_reason":"Goal 0 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == ( - ( * ( / ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) 8 ) 2 ) ( + ( * v2 2 ) ( + ( * v3 17 ) ( + ( * v4 9 ) v5 ) ) ) ) ( - ( * ( / ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) 8 ) 2 ) ( + ( * v2 2 ) ( + ( * v3 17 ) ( + ( * v4 9 ) v5 ) ) ) ) )","chompy_result":{"index":14,"start_expression":"( == ( - ( * ( / ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) 8 ) 2 ) ( + ( * v2 2 ) ( + ( * v3 17 ) ( + ( * v4 9 ) v5 ) ) ) ) ( - ( * ( / ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) 8 ) 2 ) ( + ( * v2 2 ) ( + ( * v3 17 ) ( + ( * v4 9 ) v5 ) ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":360,"rebuilds":2,"total_time":0.0006564580000000001,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":14,"start_expression":"( == ( - ( * ( / ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) 8 ) 2 ) ( + ( * v2 2 ) ( + ( * v3 17 ) ( + ( * v4 9 ) v5 ) ) ) ) ( - ( * ( / ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) 8 ) 2 ) ( + ( * v2 2 ) ( + ( * v3 17 ) ( + ( * v4 9 ) v5 ) ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":51,"rebuilds":0,"total_time":0.000043874999999999996,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( - ( * v0 4 ) ( / ( - ( + v1 v2 ) 1 ) 8 ) ) v3 ) ( + ( - ( * v0 4 ) ( / ( - ( + v1 v2 ) 1 ) 8 ) ) v3 ) )","chompy_result":{"index":15,"start_expression":"( == ( + ( - ( * v0 4 ) ( / ( - ( + v1 v2 ) 1 ) 8 ) ) v3 ) ( + ( - ( * v0 4 ) ( / ( - ( + v1 v2 ) 1 ) 8 ) ) v3 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":159,"rebuilds":2,"total_time":0.000434374,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":15,"start_expression":"( == ( + ( - ( * v0 4 ) ( / ( - ( + v1 v2 ) 1 ) 8 ) ) v3 ) ( + ( - ( * v0 4 ) ( / ( - ( + v1 v2 ) 1 ) 8 ) ) v3 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":23,"rebuilds":0,"total_time":0.000029792000000000002,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( * ( / ( + ( min ( - ( * v0 4 ) 8 ) v1 ) 15 ) 4 ) 4 ) ( + ( * v2 16 ) v3 ) ) ( + ( * ( / ( + ( min ( - ( * v0 4 ) 8 ) v1 ) 15 ) 4 ) 4 ) ( + ( * v2 16 ) v3 ) ) )","chompy_result":{"index":16,"start_expression":"( == ( + ( * ( / ( + ( min ( - ( * v0 4 ) 8 ) v1 ) 15 ) 4 ) 4 ) ( + ( * v2 16 ) v3 ) ) ( + ( * ( / ( + ( min ( - ( * v0 4 ) 8 ) v1 ) 15 ) 4 ) 4 ) ( + ( * v2 16 ) v3 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":212,"rebuilds":2,"total_time":0.000497334,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":16,"start_expression":"( == ( + ( * ( / ( + ( min ( - ( * v0 4 ) 8 ) v1 ) 15 ) 4 ) 4 ) ( + ( * v2 16 ) v3 ) ) ( + ( * ( / ( + ( min ( - ( * v0 4 ) 8 ) v1 ) 15 ) 4 ) 4 ) ( + ( * v2 16 ) v3 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":38,"rebuilds":0,"total_time":0.000035292,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( * v0 56 ) ( * ( / ( + v1 v2 ) 250 ) 64 ) ) ( + ( * v0 56 ) ( * ( / ( + v1 v2 ) 250 ) 64 ) ) )","chompy_result":{"index":17,"start_expression":"( == ( + ( * v0 56 ) ( * ( / ( + v1 v2 ) 250 ) 64 ) ) ( + ( * v0 56 ) ( * ( / ( + v1 v2 ) 250 ) 64 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":117,"rebuilds":2,"total_time":0.000351792,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":17,"start_expression":"( == ( + ( * v0 56 ) ( * ( / ( + v1 v2 ) 250 ) 64 ) ) ( + ( * v0 56 ) ( * ( / ( + v1 v2 ) 250 ) 64 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":19,"rebuilds":0,"total_time":0.000028916000000000002,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( max ( + ( / ( - 112 v0 ) 4 ) ( * ( / ( + ( + v1 v2 ) 251 ) 63 ) 8 ) ) ( + ( - ( * ( / ( + ( + v1 v2 ) 251 ) 63 ) 8 ) ( / v0 4 ) ) 28 ) ) ( max ( + ( / ( - 112 v0 ) 4 ) ( * ( / ( + ( + v1 v2 ) 251 ) 63 ) 8 ) ) ( + ( - ( * ( / ( + ( + v1 v2 ) 251 ) 63 ) 8 ) ( / v0 4 ) ) 28 ) ) )","chompy_result":{"index":18,"start_expression":"( == ( max ( + ( / ( - 112 v0 ) 4 ) ( * ( / ( + ( + v1 v2 ) 251 ) 63 ) 8 ) ) ( + ( - ( * ( / ( + ( + v1 v2 ) 251 ) 63 ) 8 ) ( / v0 4 ) ) 28 ) ) ( max ( + ( / ( - 112 v0 ) 4 ) ( * ( / ( + ( + v1 v2 ) 251 ) 63 ) 8 ) ) ( + ( - ( * ( / ( + ( + v1 v2 ) 251 ) 63 ) 8 ) ( / v0 4 ) ) 28 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":221,"rebuilds":2,"total_time":0.000513917,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":18,"start_expression":"( == ( max ( + ( / ( - 112 v0 ) 4 ) ( * ( / ( + ( + v1 v2 ) 251 ) 63 ) 8 ) ) ( + ( - ( * ( / ( + ( + v1 v2 ) 251 ) 63 ) 8 ) ( / v0 4 ) ) 28 ) ) ( max ( + ( / ( - 112 v0 ) 4 ) ( * ( / ( + ( + v1 v2 ) 251 ) 63 ) 8 ) ) ( + ( - ( * ( / ( + ( + v1 v2 ) 251 ) 63 ) 8 ) ( / v0 4 ) ) 28 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":40,"rebuilds":0,"total_time":0.000031542,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( + ( min v0 4 ) v1 ) 0 ) 4 ) 0 ) 15 ) ( - ( + ( * ( + ( + ( min v0 4 ) v1 ) 0 ) 4 ) 0 ) 15 ) ) ) ( >= ( - ( + ( * ( + ( + ( min v0 4 ) v1 ) ( + v2 3 ) ) 4 ) 3 ) 15 ) ( - ( + ( * ( + ( + ( min v0 4 ) v1 ) ( - ( + ( + v2 4 ) 0 ) 1 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) 15 ) ) ) ( <= v3 ( + 0 v3 ) ) ) ( >= ( + v3 6 ) ( + ( - ( + 7 0 ) 1 ) v3 ) ) ) ( <= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) ) ( >= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) )","chompy_result":{"index":19,"start_expression":"( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( + ( min v0 4 ) v1 ) 0 ) 4 ) 0 ) 15 ) ( - ( + ( * ( + ( + ( min v0 4 ) v1 ) 0 ) 4 ) 0 ) 15 ) ) ) ( >= ( - ( + ( * ( + ( + ( min v0 4 ) v1 ) ( + v2 3 ) ) 4 ) 3 ) 15 ) ( - ( + ( * ( + ( + ( min v0 4 ) v1 ) ( - ( + ( + v2 4 ) 0 ) 1 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) 15 ) ) ) ( <= v3 ( + 0 v3 ) ) ) ( >= ( + v3 6 ) ( + ( - ( + 7 0 ) 1 ) v3 ) ) ) ( <= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) ) ( >= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) )","end_expression":"1/0","result":false,"best_expr":"(&& (>= (- (* 4 (+ (min 4 v0) (+ 3 (+ v1 v2)))) 12) (- (* 4 (+ (min 4 v0) (+ 3 (+ v1 v2)))) 12)) (&& (>= (+ (* v4 2) v5) (+ (* v4 2) v5)) (!= 0 (>= (+ v3 6) (+ v3 6)))))","class":"../chompy-rules.txt","iterations":5,"egraph_size":3152,"rebuilds":226,"total_time":3.0735959870000027,"stop_reason":"Time Limit : 0.010009917","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":19,"start_expression":"( && ( && ( && ( && ( && ( && 1 ( <= ( - ( + ( * ( + ( + ( min v0 4 ) v1 ) 0 ) 4 ) 0 ) 15 ) ( - ( + ( * ( + ( + ( min v0 4 ) v1 ) 0 ) 4 ) 0 ) 15 ) ) ) ( >= ( - ( + ( * ( + ( + ( min v0 4 ) v1 ) ( + v2 3 ) ) 4 ) 3 ) 15 ) ( - ( + ( * ( + ( + ( min v0 4 ) v1 ) ( - ( + ( + v2 4 ) 0 ) 1 ) ) 4 ) ( - ( + 4 0 ) 1 ) ) 15 ) ) ) ( <= v3 ( + 0 v3 ) ) ) ( >= ( + v3 6 ) ( + ( - ( + 7 0 ) 1 ) v3 ) ) ) ( <= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) ) ( >= ( + ( * v4 2 ) v5 ) ( + ( * v4 2 ) v5 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":4,"egraph_size":1429,"rebuilds":189,"total_time":0.000940874,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( != ( / ( + ( * v0 64 ) 427 ) 276 ) 0 )","chompy_result":{"index":20,"start_expression":"( != ( / ( + ( * v0 64 ) 427 ) 276 ) 0 )","end_expression":"1/0","result":false,"best_expr":"(!= (/ (+ (* v0 64) 427) 276) 0)","class":"../chompy-rules.txt","iterations":1,"egraph_size":45,"rebuilds":0,"total_time":0.000078374,"stop_reason":"Impossible (!= (/ (+ ?a (* ?x ?b)) ?c) ?d) Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":20,"start_expression":"( != ( / ( + ( * v0 64 ) 427 ) 276 ) 0 )","end_expression":"1/0","result":false,"best_expr":"(!= (/ (+ (* v0 64) 427) 276) 0)","class":"CaviarAll","iterations":1,"egraph_size":13,"rebuilds":0,"total_time":0.000034958,"stop_reason":"Impossible (!= (/ (+ ?a (* ?x ?b)) ?c) ?d) Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == ( - ( max v0 0 ) ( + ( * v1 4 ) v2 ) ) ( - ( max v0 0 ) ( + ( * v1 4 ) v2 ) ) )","chompy_result":{"index":21,"start_expression":"( == ( - ( max v0 0 ) ( + ( * v1 4 ) v2 ) ) ( - ( max v0 0 ) ( + ( * v1 4 ) v2 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":125,"rebuilds":2,"total_time":0.000339041,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":21,"start_expression":"( == ( - ( max v0 0 ) ( + ( * v1 4 ) v2 ) ) ( - ( max v0 0 ) ( + ( * v1 4 ) v2 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":19,"rebuilds":0,"total_time":0.000031083,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( <= ( max ( + ( min ( min ( + ( - ( / ( min ( + ( * v3 8 ) 2 ) ( + v4 v5 ) ) 4 ) ( * ( + ( * v6 12 ) v1 ) 2 ) ) 7 ) ( - 7 ( * ( max ( - v1 v2 ) -8 ) 2 ) ) ) ( - ( + 0 ( + ( * ( min ( - v2 v1 ) 8 ) 2 ) 9 ) ) 1 ) ) 1 ) ( min ( max ( + ( - ( / v5 4 ) ( * ( + ( * v6 12 ) v1 ) 2 ) ) 8 ) 0 ) ( + ( + ( * ( min ( - v2 v1 ) 8 ) 2 ) 9 ) 0 ) ) ) ( min ( max ( + ( - ( / v5 4 ) ( * ( + ( * v6 12 ) v1 ) 2 ) ) 8 ) 0 ) ( + ( + ( * ( min ( - v2 v1 ) 8 ) 2 ) 9 ) 0 ) ) )","chompy_result":{"index":22,"start_expression":"( <= ( max ( + ( min ( min ( + ( - ( / ( min ( + ( * v3 8 ) 2 ) ( + v4 v5 ) ) 4 ) ( * ( + ( * v6 12 ) v1 ) 2 ) ) 7 ) ( - 7 ( * ( max ( - v1 v2 ) -8 ) 2 ) ) ) ( - ( + 0 ( + ( * ( min ( - v2 v1 ) 8 ) 2 ) 9 ) ) 1 ) ) 1 ) ( min ( max ( + ( - ( / v5 4 ) ( * ( + ( * v6 12 ) v1 ) 2 ) ) 8 ) 0 ) ( + ( + ( * ( min ( - v2 v1 ) 8 ) 2 ) 9 ) 0 ) ) ) ( min ( max ( + ( - ( / v5 4 ) ( * ( + ( * v6 12 ) v1 ) 2 ) ) 8 ) 0 ) ( + ( + ( * ( min ( - v2 v1 ) 8 ) 2 ) 9 ) 0 ) ) )","end_expression":"1/0","result":false,"best_expr":"(<= (max (+ 1 (min (- (/ (min (+ (* v3 8) 2) (+ v4 v5)) 4) (+ (* 2 (+ (* v6 12) v1)) -7)) (min (- 7 (* 2 (max (- v1 v2) -8))) (+ 8 (* 2 (min 8 (- v2 v1))))))) (min (+ (* 2 (min 8 (- v2 v1))) 9) (- (max (* 2 (+ (* v6 12) v1)) (- (/ v5 4) -8)) (* 2 (+ (* v6 12) v1))))) (min (+ (* 2 (min 8 (- v2 v1))) 9) (- (max (* 2 (+ (* v6 12) v1)) (- (/ v5 4) -8)) (* 2 (+ (* v6 12) v1)))))","class":"../chompy-rules.txt","iterations":5,"egraph_size":4000,"rebuilds":310,"total_time":3.065253896999997,"stop_reason":"Time Limit : 0.0100025","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":22,"start_expression":"( <= ( max ( + ( min ( min ( + ( - ( / ( min ( + ( * v3 8 ) 2 ) ( + v4 v5 ) ) 4 ) ( * ( + ( * v6 12 ) v1 ) 2 ) ) 7 ) ( - 7 ( * ( max ( - v1 v2 ) -8 ) 2 ) ) ) ( - ( + 0 ( + ( * ( min ( - v2 v1 ) 8 ) 2 ) 9 ) ) 1 ) ) 1 ) ( min ( max ( + ( - ( / v5 4 ) ( * ( + ( * v6 12 ) v1 ) 2 ) ) 8 ) 0 ) ( + ( + ( * ( min ( - v2 v1 ) 8 ) 2 ) 9 ) 0 ) ) ) ( min ( max ( + ( - ( / v5 4 ) ( * ( + ( * v6 12 ) v1 ) 2 ) ) 8 ) 0 ) ( + ( + ( * ( min ( - v2 v1 ) 8 ) 2 ) 9 ) 0 ) ) )","end_expression":"1/0","result":false,"best_expr":"(<= (min (+ (/ (+ v5 v4) 4) (+ (* v1 -2) (* v6 -24))) (min (+ (* v1 -2) (+ (* v6 -24) (* 2 v3))) (min 16 (+ (* v1 -2) (* 2 v2))))) (- (+ (* v1 -2) (+ (* v6 -24) -8)) (min (+ (* v1 -2) (* v6 -24)) (+ -8 (/ v5 -4)))))","class":"CaviarAll","iterations":6,"egraph_size":9895,"rebuilds":317,"total_time":3.2700988359999963,"stop_reason":"Time Limit : 0.010038","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == ( min ( / ( + ( + v0 v1 ) 68 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( * v2 8 ) ) ) ( min ( / ( + ( + v0 v1 ) 68 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( * v2 8 ) ) ) )","chompy_result":{"index":23,"start_expression":"( == ( min ( / ( + ( + v0 v1 ) 68 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( * v2 8 ) ) ) ( min ( / ( + ( + v0 v1 ) 68 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( * v2 8 ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":155,"rebuilds":2,"total_time":0.000403624,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":23,"start_expression":"( == ( min ( / ( + ( + v0 v1 ) 68 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( * v2 8 ) ) ) ( min ( / ( + ( + v0 v1 ) 68 ) 8 ) ( + ( / ( + v0 v1 ) 8 ) ( * v2 8 ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":23,"rebuilds":0,"total_time":0.000036459,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + ( + ( * ( / ( - v1 v0 ) 4 ) 4 ) v0 ) 3 ) ( + ( + ( * ( / ( - v1 v0 ) 4 ) 4 ) v0 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )","chompy_result":{"index":24,"start_expression":"( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + ( + ( * ( / ( - v1 v0 ) 4 ) 4 ) v0 ) 3 ) ( + ( + ( * ( / ( - v1 v0 ) 4 ) 4 ) v0 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )","end_expression":"1/0","result":false,"best_expr":"(&& (>= (- (- v0 -3) (* (/ (- v1 v0) 4) -4)) (- (- v0 -3) (* (/ (- v1 v0) 4) -4))) (&& (>= v2 v2) (>= v3 v3)))","class":"../chompy-rules.txt","iterations":6,"egraph_size":3883,"rebuilds":73,"total_time":3.076001497000006,"stop_reason":"Time Limit : 0.010018083","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":24,"start_expression":"( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * 0 4 ) v0 ) 0 ) ( + ( + ( * 0 4 ) v0 ) 0 ) ) ) ( >= ( + ( + ( * ( / ( - v1 v0 ) 4 ) 4 ) v0 ) 3 ) ( + ( + ( * ( / ( - v1 v0 ) 4 ) 4 ) v0 ) ( - ( + 4 0 ) 1 ) ) ) ) ( <= v2 v2 ) ) ( >= v2 v2 ) ) ( <= v3 v3 ) ) ( >= v3 v3 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":2,"egraph_size":47,"rebuilds":14,"total_time":0.000117291,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( - ( - ( * ( + ( * ( max ( min ( / ( + v0 v1 ) 63 ) 31 ) 0 ) 2 ) v2 ) 4 ) ( * v2 4 ) ) ( * ( max ( min ( / ( + v0 v1 ) 63 ) 31 ) 0 ) 8 ) ) ( - ( - ( * ( + ( * ( max ( min ( / ( + v0 v1 ) 63 ) 31 ) 0 ) 2 ) v2 ) 4 ) ( * v2 4 ) ) ( * ( max ( min ( / ( + v0 v1 ) 63 ) 31 ) 0 ) 8 ) ) )","chompy_result":{"index":25,"start_expression":"( == ( - ( - ( * ( + ( * ( max ( min ( / ( + v0 v1 ) 63 ) 31 ) 0 ) 2 ) v2 ) 4 ) ( * v2 4 ) ) ( * ( max ( min ( / ( + v0 v1 ) 63 ) 31 ) 0 ) 8 ) ) ( - ( - ( * ( + ( * ( max ( min ( / ( + v0 v1 ) 63 ) 31 ) 0 ) 2 ) v2 ) 4 ) ( * v2 4 ) ) ( * ( max ( min ( / ( + v0 v1 ) 63 ) 31 ) 0 ) 8 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":245,"rebuilds":2,"total_time":0.000523499,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":25,"start_expression":"( == ( - ( - ( * ( + ( * ( max ( min ( / ( + v0 v1 ) 63 ) 31 ) 0 ) 2 ) v2 ) 4 ) ( * v2 4 ) ) ( * ( max ( min ( / ( + v0 v1 ) 63 ) 31 ) 0 ) 8 ) ) ( - ( - ( * ( + ( * ( max ( min ( / ( + v0 v1 ) 63 ) 31 ) 0 ) 2 ) v2 ) 4 ) ( * v2 4 ) ) ( * ( max ( min ( / ( + v0 v1 ) 63 ) 31 ) 0 ) 8 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":39,"rebuilds":0,"total_time":0.00004225,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 8 ) 753 ) 697 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 8 ) 753 ) 697 ) )","chompy_result":{"index":26,"start_expression":"( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 8 ) 753 ) 697 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 8 ) 753 ) 697 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":154,"rebuilds":2,"total_time":0.000429625,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":26,"start_expression":"( == ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 8 ) 753 ) 697 ) ( / ( + ( * ( - ( / ( + ( + v0 v1 ) 39 ) 8 ) ( / v1 8 ) ) 8 ) 753 ) 697 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":24,"rebuilds":0,"total_time":0.000032334,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( != ( / ( + ( - v0 v1 ) 81 ) 68 ) 0 )","chompy_result":{"index":27,"start_expression":"( != ( / ( + ( - v0 v1 ) 81 ) 68 ) 0 )","end_expression":"1/0","result":false,"best_expr":"(!= (/ (+ (- v0 v1) 81) 68) 0)","class":"../chompy-rules.txt","iterations":6,"egraph_size":4996,"rebuilds":380,"total_time":3.056524828999999,"stop_reason":"Time Limit : 0.010007","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":27,"start_expression":"( != ( / ( + ( - v0 v1 ) 81 ) 68 ) 0 )","end_expression":"1/0","result":false,"best_expr":"(!= (/ (+ 81 (- v0 v1)) 68) 0)","class":"CaviarAll","iterations":11,"egraph_size":140,"rebuilds":55,"total_time":0.0008457499999999999,"stop_reason":"Saturation","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == ( + ( min ( * ( + ( / v0 32 ) v1 ) 16 ) ( + ( * ( / ( + ( + v2 v0 ) 31 ) 32 ) 16 ) 67 ) ) ( * v3 8 ) ) ( + ( min ( * ( + ( / v0 32 ) v1 ) 16 ) ( + ( * ( / ( + ( + v2 v0 ) 31 ) 32 ) 16 ) 67 ) ) ( * v3 8 ) ) )","chompy_result":{"index":28,"start_expression":"( == ( + ( min ( * ( + ( / v0 32 ) v1 ) 16 ) ( + ( * ( / ( + ( + v2 v0 ) 31 ) 32 ) 16 ) 67 ) ) ( * v3 8 ) ) ( + ( min ( * ( + ( / v0 32 ) v1 ) 16 ) ( + ( * ( / ( + ( + v2 v0 ) 31 ) 32 ) 16 ) 67 ) ) ( * v3 8 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":234,"rebuilds":2,"total_time":0.000514542,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":28,"start_expression":"( == ( + ( min ( * ( + ( / v0 32 ) v1 ) 16 ) ( + ( * ( / ( + ( + v2 v0 ) 31 ) 32 ) 16 ) 67 ) ) ( * v3 8 ) ) ( + ( min ( * ( + ( / v0 32 ) v1 ) 16 ) ( + ( * ( / ( + ( + v2 v0 ) 31 ) 32 ) 16 ) 67 ) ) ( * v3 8 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":39,"rebuilds":0,"total_time":0.000042791000000000004,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( * ( / ( + ( + v0 v1 ) 63 ) 32 ) 4 ) ( + ( * v2 4 ) 35 ) ) ( min ( * ( / ( + ( + v0 v1 ) 63 ) 32 ) 4 ) ( + ( * v2 4 ) 35 ) ) )","chompy_result":{"index":29,"start_expression":"( == ( min ( * ( / ( + ( + v0 v1 ) 63 ) 32 ) 4 ) ( + ( * v2 4 ) 35 ) ) ( min ( * ( / ( + ( + v0 v1 ) 63 ) 32 ) 4 ) ( + ( * v2 4 ) 35 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":160,"rebuilds":2,"total_time":0.000424624,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":29,"start_expression":"( == ( min ( * ( / ( + ( + v0 v1 ) 63 ) 32 ) 4 ) ( + ( * v2 4 ) 35 ) ) ( min ( * ( / ( + ( + v0 v1 ) 63 ) 32 ) 4 ) ( + ( * v2 4 ) 35 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":23,"rebuilds":0,"total_time":0.000031959,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( - ( min ( * ( - v0 v1 ) 16 ) 72 ) 72 ) 1 )","chompy_result":{"index":30,"start_expression":"( == ( - ( min ( * ( - v0 v1 ) 16 ) 72 ) 72 ) 1 )","end_expression":"1/0","result":true,"best_expr":"0","class":"../chompy-rules.txt","iterations":4,"egraph_size":2187,"rebuilds":158,"total_time":0.004452001,"stop_reason":"Goal 0 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":30,"start_expression":"( == ( - ( min ( * ( - v0 v1 ) 16 ) 72 ) 72 ) 1 )","end_expression":"1/0","result":true,"best_expr":"0","class":"CaviarAll","iterations":4,"egraph_size":129,"rebuilds":1,"total_time":0.000177793,"stop_reason":"Goal 0 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == ( min ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) ( + v2 124 ) ) ( min ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) ( + v2 124 ) ) )","chompy_result":{"index":31,"start_expression":"( == ( min ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) ( + v2 124 ) ) ( min ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) ( + v2 124 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":218,"rebuilds":2,"total_time":0.000488917,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":31,"start_expression":"( == ( min ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) ( + v2 124 ) ) ( min ( - ( max ( min ( + v0 v1 ) 2000 ) 1 ) ( max ( min v1 1999 ) 0 ) ) ( + v2 124 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":38,"rebuilds":0,"total_time":0.000035833999999999996,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( + ( min ( * v0 32 ) 56 ) v1 ) ( + ( max ( min v2 990 ) -9 ) 310 ) ) ( min ( + ( min ( * v0 32 ) 56 ) v1 ) ( + ( max ( min v2 990 ) -9 ) 310 ) ) )","chompy_result":{"index":32,"start_expression":"( == ( min ( + ( min ( * v0 32 ) 56 ) v1 ) ( + ( max ( min v2 990 ) -9 ) 310 ) ) ( min ( + ( min ( * v0 32 ) 56 ) v1 ) ( + ( max ( min v2 990 ) -9 ) 310 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":175,"rebuilds":2,"total_time":0.000431458,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":32,"start_expression":"( == ( min ( + ( min ( * v0 32 ) 56 ) v1 ) ( + ( max ( min v2 990 ) -9 ) 310 ) ) ( min ( + ( min ( * v0 32 ) 56 ) v1 ) ( + ( max ( min v2 990 ) -9 ) 310 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":37,"rebuilds":0,"total_time":0.000034291999999999996,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( max ( min ( / ( + ( + v0 v1 ) 129 ) 2 ) 999 ) 0 ) ( + v2 15 ) ) ( min ( max ( min ( / ( + ( + v0 v1 ) 129 ) 2 ) 999 ) 0 ) ( + v2 15 ) ) )","chompy_result":{"index":33,"start_expression":"( == ( min ( max ( min ( / ( + ( + v0 v1 ) 129 ) 2 ) 999 ) 0 ) ( + v2 15 ) ) ( min ( max ( min ( / ( + ( + v0 v1 ) 129 ) 2 ) 999 ) 0 ) ( + v2 15 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":178,"rebuilds":2,"total_time":0.000426915,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":33,"start_expression":"( == ( min ( max ( min ( / ( + ( + v0 v1 ) 129 ) 2 ) 999 ) 0 ) ( + v2 15 ) ) ( min ( max ( min ( / ( + ( + v0 v1 ) 129 ) 2 ) 999 ) 0 ) ( + v2 15 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":28,"rebuilds":0,"total_time":0.000030916,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( + ( * v0 60 ) ( * ( + ( * v1 4 ) v2 ) 32 ) ) ( + ( * v3 8 ) 140 ) ) ( min ( + ( * v0 60 ) ( * ( + ( * v1 4 ) v2 ) 32 ) ) ( + ( * v3 8 ) 140 ) ) )","chompy_result":{"index":34,"start_expression":"( == ( min ( + ( * v0 60 ) ( * ( + ( * v1 4 ) v2 ) 32 ) ) ( + ( * v3 8 ) 140 ) ) ( min ( + ( * v0 60 ) ( * ( + ( * v1 4 ) v2 ) 32 ) ) ( + ( * v3 8 ) 140 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":181,"rebuilds":2,"total_time":0.000459709,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":34,"start_expression":"( == ( min ( + ( * v0 60 ) ( * ( + ( * v1 4 ) v2 ) 32 ) ) ( + ( * v3 8 ) 140 ) ) ( min ( + ( * v0 60 ) ( * ( + ( * v1 4 ) v2 ) 32 ) ) ( + ( * v3 8 ) 140 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":31,"rebuilds":0,"total_time":0.000031333,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( - ( - ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) ( * v2 17 ) ) ( max ( min ( / v1 8 ) 249 ) 0 ) ) ( + ( min v3 6 ) 7 ) ) ( min ( - ( - ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) ( * v2 17 ) ) ( max ( min ( / v1 8 ) 249 ) 0 ) ) ( + ( min v3 6 ) 7 ) ) )","chompy_result":{"index":35,"start_expression":"( == ( min ( - ( - ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) ( * v2 17 ) ) ( max ( min ( / v1 8 ) 249 ) 0 ) ) ( + ( min v3 6 ) 7 ) ) ( min ( - ( - ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) ( * v2 17 ) ) ( max ( min ( / v1 8 ) 249 ) 0 ) ) ( + ( min v3 6 ) 7 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":352,"rebuilds":2,"total_time":0.0007000410000000001,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":35,"start_expression":"( == ( min ( - ( - ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) ( * v2 17 ) ) ( max ( min ( / v1 8 ) 249 ) 0 ) ) ( + ( min v3 6 ) 7 ) ) ( min ( - ( - ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) ( * v2 17 ) ) ( max ( min ( / v1 8 ) 249 ) 0 ) ) ( + ( min v3 6 ) 7 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":52,"rebuilds":0,"total_time":0.000039126000000000005,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) ( max ( min ( / v1 8 ) 249 ) 0 ) ) 85 ) 84 ) ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) ( max ( min ( / v1 8 ) 249 ) 0 ) ) 85 ) 84 ) )","chompy_result":{"index":36,"start_expression":"( == ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) ( max ( min ( / v1 8 ) 249 ) 0 ) ) 85 ) 84 ) ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) ( max ( min ( / v1 8 ) 249 ) 0 ) ) 85 ) 84 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":246,"rebuilds":2,"total_time":0.000524916,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":36,"start_expression":"( == ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) ( max ( min ( / v1 8 ) 249 ) 0 ) ) 85 ) 84 ) ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 7 ) 8 ) 249 ) 0 ) ( max ( min ( / v1 8 ) 249 ) 0 ) ) 85 ) 84 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":39,"rebuilds":0,"total_time":0.000033166,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( min ( * ( / v0 16 ) 8 ) 4 ) ( * v1 340 ) ) ( + ( min ( * ( / v0 16 ) 8 ) 4 ) ( * v1 340 ) ) )","chompy_result":{"index":37,"start_expression":"( == ( + ( min ( * ( / v0 16 ) 8 ) 4 ) ( * v1 340 ) ) ( + ( min ( * ( / v0 16 ) 8 ) 4 ) ( * v1 340 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":108,"rebuilds":2,"total_time":0.00033529100000000004,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":37,"start_expression":"( == ( + ( min ( * ( / v0 16 ) 8 ) 4 ) ( * v1 340 ) ) ( + ( min ( * ( / v0 16 ) 8 ) 4 ) ( * v1 340 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":22,"rebuilds":0,"total_time":0.000030375,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( * ( / v0 63 ) 8 ) ( + ( * ( / ( + ( + v1 v0 ) 314 ) 63 ) 8 ) 29 ) ) ( min ( * ( / v0 63 ) 8 ) ( + ( * ( / ( + ( + v1 v0 ) 314 ) 63 ) 8 ) 29 ) ) )","chompy_result":{"index":38,"start_expression":"( == ( min ( * ( / v0 63 ) 8 ) ( + ( * ( / ( + ( + v1 v0 ) 314 ) 63 ) 8 ) 29 ) ) ( min ( * ( / v0 63 ) 8 ) ( + ( * ( / ( + ( + v1 v0 ) 314 ) 63 ) 8 ) 29 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":160,"rebuilds":2,"total_time":0.00042545899999999994,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":38,"start_expression":"( == ( min ( * ( / v0 63 ) 8 ) ( + ( * ( / ( + ( + v1 v0 ) 314 ) 63 ) 8 ) 29 ) ) ( min ( * ( / v0 63 ) 8 ) ( + ( * ( / ( + ( + v1 v0 ) 314 ) 63 ) 8 ) 29 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":23,"rebuilds":0,"total_time":0.000030041999999999998,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( * ( + ( min ( - ( / ( + ( + v0 v1 ) 64 ) 65 ) ( * v2 4 ) ) ( + ( + ( / v1 65 ) ( * v3 8 ) ) 3 ) ) ( * v3 -8 ) ) -2 ) ( + ( * ( / v1 65 ) 2 ) v4 ) ) ( + ( * ( + ( min ( - ( / ( + ( + v0 v1 ) 64 ) 65 ) ( * v2 4 ) ) ( + ( + ( / v1 65 ) ( * v3 8 ) ) 3 ) ) ( * v3 -8 ) ) -2 ) ( + ( * ( / v1 65 ) 2 ) v4 ) ) )","chompy_result":{"index":39,"start_expression":"( == ( + ( * ( + ( min ( - ( / ( + ( + v0 v1 ) 64 ) 65 ) ( * v2 4 ) ) ( + ( + ( / v1 65 ) ( * v3 8 ) ) 3 ) ) ( * v3 -8 ) ) -2 ) ( + ( * ( / v1 65 ) 2 ) v4 ) ) ( + ( * ( + ( min ( - ( / ( + ( + v0 v1 ) 64 ) 65 ) ( * v2 4 ) ) ( + ( + ( / v1 65 ) ( * v3 8 ) ) 3 ) ) ( * v3 -8 ) ) -2 ) ( + ( * ( / v1 65 ) 2 ) v4 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":340,"rebuilds":2,"total_time":0.000693084,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":39,"start_expression":"( == ( + ( * ( + ( min ( - ( / ( + ( + v0 v1 ) 64 ) 65 ) ( * v2 4 ) ) ( + ( + ( / v1 65 ) ( * v3 8 ) ) 3 ) ) ( * v3 -8 ) ) -2 ) ( + ( * ( / v1 65 ) 2 ) v4 ) ) ( + ( * ( + ( min ( - ( / ( + ( + v0 v1 ) 64 ) 65 ) ( * v2 4 ) ) ( + ( + ( / v1 65 ) ( * v3 8 ) ) 3 ) ) ( * v3 -8 ) ) -2 ) ( + ( * ( / v1 65 ) 2 ) v4 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":57,"rebuilds":0,"total_time":0.000045624,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( / ( + ( - ( max ( + v0 v1 ) 2000 ) ( min v1 0 ) ) 63 ) 64 ) ( / ( + ( - ( max ( + v0 v1 ) 2000 ) ( min v1 0 ) ) 63 ) 64 ) )","chompy_result":{"index":40,"start_expression":"( == ( / ( + ( - ( max ( + v0 v1 ) 2000 ) ( min v1 0 ) ) 63 ) 64 ) ( / ( + ( - ( max ( + v0 v1 ) 2000 ) ( min v1 0 ) ) 63 ) 64 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":172,"rebuilds":2,"total_time":0.000468624,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":40,"start_expression":"( == ( / ( + ( - ( max ( + v0 v1 ) 2000 ) ( min v1 0 ) ) 63 ) 64 ) ( / ( + ( - ( max ( + v0 v1 ) 2000 ) ( min v1 0 ) ) 63 ) 64 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":24,"rebuilds":0,"total_time":0.000032625,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( + ( * v0 4 ) v1 ) ( + v2 23 ) ) ( min ( + ( * v0 4 ) v1 ) ( + v2 23 ) ) )","chompy_result":{"index":41,"start_expression":"( == ( min ( + ( * v0 4 ) v1 ) ( + v2 23 ) ) ( min ( + ( * v0 4 ) v1 ) ( + v2 23 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":110,"rebuilds":2,"total_time":0.00036095699999999997,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":41,"start_expression":"( == ( min ( + ( * v0 4 ) v1 ) ( + v2 23 ) ) ( min ( + ( * v0 4 ) v1 ) ( + v2 23 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":19,"rebuilds":0,"total_time":0.000029625000000000002,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( * ( - ( / ( + ( + v0 v1 ) 1999 ) 2000 ) ( / v1 2000 ) ) 256 ) ( + ( * v2 256 ) 399 ) ) ( min ( * ( - ( / ( + ( + v0 v1 ) 1999 ) 2000 ) ( / v1 2000 ) ) 256 ) ( + ( * v2 256 ) 399 ) ) )","chompy_result":{"index":42,"start_expression":"( == ( min ( * ( - ( / ( + ( + v0 v1 ) 1999 ) 2000 ) ( / v1 2000 ) ) 256 ) ( + ( * v2 256 ) 399 ) ) ( min ( * ( - ( / ( + ( + v0 v1 ) 1999 ) 2000 ) ( / v1 2000 ) ) 256 ) ( + ( * v2 256 ) 399 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":186,"rebuilds":2,"total_time":0.000466333,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":42,"start_expression":"( == ( min ( * ( - ( / ( + ( + v0 v1 ) 1999 ) 2000 ) ( / v1 2000 ) ) 256 ) ( + ( * v2 256 ) 399 ) ) ( min ( * ( - ( / ( + ( + v0 v1 ) 1999 ) 2000 ) ( / v1 2000 ) ) 256 ) ( + ( * v2 256 ) 399 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":28,"rebuilds":0,"total_time":0.000031833,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( - ( * ( / ( + ( + v0 v1 ) 93 ) 2 ) 2 ) 19 ) ( - ( + ( - ( * ( / ( + ( + v0 v1 ) 93 ) 2 ) 2 ) 19 ) ( + ( * ( % ( + ( + v0 v1 ) 1 ) 2 ) 2 ) 70 ) ) 1 ) )","chompy_result":{"index":43,"start_expression":"( == ( - ( * ( / ( + ( + v0 v1 ) 93 ) 2 ) 2 ) 19 ) ( - ( + ( - ( * ( / ( + ( + v0 v1 ) 93 ) 2 ) 2 ) 19 ) ( + ( * ( % ( + ( + v0 v1 ) 1 ) 2 ) 2 ) 70 ) ) 1 ) )","end_expression":"1/0","result":false,"best_expr":"(== (* 2 (\"%\" (+ v0 (+ v1 1)) 2)) -69)","class":"../chompy-rules.txt","iterations":6,"egraph_size":4887,"rebuilds":184,"total_time":3.0525989379999983,"stop_reason":"Time Limit : 0.01002275","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":43,"start_expression":"( == ( - ( * ( / ( + ( + v0 v1 ) 93 ) 2 ) 2 ) 19 ) ( - ( + ( - ( * ( / ( + ( + v0 v1 ) 93 ) 2 ) 2 ) 19 ) ( + ( * ( % ( + ( + v0 v1 ) 1 ) 2 ) 2 ) 70 ) ) 1 ) )","end_expression":"1/0","result":true,"best_expr":"0","class":"CaviarAll","iterations":3,"egraph_size":46,"rebuilds":0,"total_time":0.010202417,"stop_reason":"Goal 0 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == ( * ( / ( * v0 -12 ) 4 ) 4 ) ( * v0 -12 ) )","chompy_result":{"index":44,"start_expression":"( == ( * ( / ( * v0 -12 ) 4 ) 4 ) ( * v0 -12 ) )","end_expression":"1/0","result":false,"best_expr":"(== (* v0 -12) (* 4 (/ (* v0 -12) 4)))","class":"../chompy-rules.txt","iterations":6,"egraph_size":3981,"rebuilds":168,"total_time":3.0821079259999937,"stop_reason":"Time Limit : 0.010001583","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":44,"start_expression":"( == ( * ( / ( * v0 -12 ) 4 ) 4 ) ( * v0 -12 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":4,"egraph_size":80,"rebuilds":4,"total_time":0.000157375,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( max ( min ( / ( + v0 1009 ) 1004 ) v1 ) ( / ( + v0 6 ) 1004 ) ) ( max ( min ( / ( + v0 1009 ) 1004 ) v1 ) ( / ( + v0 6 ) 1004 ) ) )","chompy_result":{"index":45,"start_expression":"( == ( max ( min ( / ( + v0 1009 ) 1004 ) v1 ) ( / ( + v0 6 ) 1004 ) ) ( max ( min ( / ( + v0 1009 ) 1004 ) v1 ) ( / ( + v0 6 ) 1004 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":130,"rebuilds":2,"total_time":0.00039291600000000004,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":45,"start_expression":"( == ( max ( min ( / ( + v0 1009 ) 1004 ) v1 ) ( / ( + v0 6 ) 1004 ) ) ( max ( min ( / ( + v0 1009 ) 1004 ) v1 ) ( / ( + v0 6 ) 1004 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":22,"rebuilds":0,"total_time":0.000033416999999999995,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( - ( - ( / ( + ( + v0 v1 ) 351 ) 32 ) ( * v2 37 ) ) ( + ( / v1 32 ) v3 ) ) ( - ( - ( / ( + ( + v0 v1 ) 351 ) 32 ) ( * v2 37 ) ) ( + ( / v1 32 ) v3 ) ) )","chompy_result":{"index":46,"start_expression":"( == ( - ( - ( / ( + ( + v0 v1 ) 351 ) 32 ) ( * v2 37 ) ) ( + ( / v1 32 ) v3 ) ) ( - ( - ( / ( + ( + v0 v1 ) 351 ) 32 ) ( * v2 37 ) ) ( + ( / v1 32 ) v3 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":230,"rebuilds":2,"total_time":0.000486082,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":46,"start_expression":"( == ( - ( - ( / ( + ( + v0 v1 ) 351 ) 32 ) ( * v2 37 ) ) ( + ( / v1 32 ) v3 ) ) ( - ( - ( / ( + ( + v0 v1 ) 351 ) 32 ) ( * v2 37 ) ) ( + ( / v1 32 ) v3 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":30,"rebuilds":0,"total_time":0.000029917,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( * v0 44 ) ( + ( min ( * v1 128 ) 124 ) ( + v2 v3 ) ) ) ( + ( * v0 44 ) ( + ( min ( * v1 128 ) 124 ) ( + v2 v3 ) ) ) )","chompy_result":{"index":47,"start_expression":"( == ( + ( * v0 44 ) ( + ( min ( * v1 128 ) 124 ) ( + v2 v3 ) ) ) ( + ( * v0 44 ) ( + ( min ( * v1 128 ) 124 ) ( + v2 v3 ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":181,"rebuilds":2,"total_time":0.000430083,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":47,"start_expression":"( == ( + ( * v0 44 ) ( + ( min ( * v1 128 ) 124 ) ( + v2 v3 ) ) ) ( + ( * v0 44 ) ( + ( min ( * v1 128 ) 124 ) ( + v2 v3 ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":30,"rebuilds":0,"total_time":0.000031417,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( * ( / ( max ( min ( + ( * v2 -500 ) ( - v1 ( min v1 4 ) ) ) 496 ) -4 ) 4 ) 4 ) ( max ( min ( + ( * v2 -500 ) ( - v1 ( min v1 4 ) ) ) 496 ) -4 ) )","chompy_result":{"index":48,"start_expression":"( == ( * ( / ( max ( min ( + ( * v2 -500 ) ( - v1 ( min v1 4 ) ) ) 496 ) -4 ) 4 ) 4 ) ( max ( min ( + ( * v2 -500 ) ( - v1 ( min v1 4 ) ) ) 496 ) -4 ) )","end_expression":"1/0","result":false,"best_expr":"(== (min 496 (max (+ (- v1 4) (* v2 -500)) (max (* v2 -500) -4))) (* 4 (/ (min 496 (max (+ (- v1 4) (* v2 -500)) (max (* v2 -500) -4))) 4)))","class":"../chompy-rules.txt","iterations":5,"egraph_size":4896,"rebuilds":63,"total_time":3.1291701940000043,"stop_reason":"Time Limit : 0.010010792","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":48,"start_expression":"( == ( * ( / ( max ( min ( + ( * v2 -500 ) ( - v1 ( min v1 4 ) ) ) 496 ) -4 ) 4 ) 4 ) ( max ( min ( + ( * v2 -500 ) ( - v1 ( min v1 4 ) ) ) 496 ) -4 ) )","end_expression":"1/0","result":false,"best_expr":"(== 0 (\"%\" (max (min (+ (max 4 v1) -4) (+ (* 500 v2) 496)) (+ -4 (* 500 v2))) 4))","class":"CaviarAll","iterations":10,"egraph_size":4804,"rebuilds":1307,"total_time":3.0485459990000066,"stop_reason":"Time Limit : 0.010055167","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == ( min ( + ( * v0 4 ) ( + ( * v1 16 ) v2 ) ) ( + v3 8 ) ) ( min ( + ( * v0 4 ) ( + ( * v1 16 ) v2 ) ) ( + v3 8 ) ) )","chompy_result":{"index":49,"start_expression":"( == ( min ( + ( * v0 4 ) ( + ( * v1 16 ) v2 ) ) ( + v3 8 ) ) ( min ( + ( * v0 4 ) ( + ( * v1 16 ) v2 ) ) ( + v3 8 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":165,"rebuilds":2,"total_time":0.000416957,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":49,"start_expression":"( == ( min ( + ( * v0 4 ) ( + ( * v1 16 ) v2 ) ) ( + v3 8 ) ) ( min ( + ( * v0 4 ) ( + ( * v1 16 ) v2 ) ) ( + v3 8 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":27,"rebuilds":0,"total_time":0.000038249999999999995,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( * ( + v0 v1 ) 4 ) ( + ( * ( + ( * v2 125 ) v1 ) 4 ) 503 ) ) ( min ( * ( + v0 v1 ) 4 ) ( + ( * ( + ( * v2 125 ) v1 ) 4 ) 503 ) ) )","chompy_result":{"index":50,"start_expression":"( == ( min ( * ( + v0 v1 ) 4 ) ( + ( * ( + ( * v2 125 ) v1 ) 4 ) 503 ) ) ( min ( * ( + v0 v1 ) 4 ) ( + ( * ( + ( * v2 125 ) v1 ) 4 ) 503 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":153,"rebuilds":2,"total_time":0.000420834,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":50,"start_expression":"( == ( min ( * ( + v0 v1 ) 4 ) ( + ( * ( + ( * v2 125 ) v1 ) 4 ) 503 ) ) ( min ( * ( + v0 v1 ) 4 ) ( + ( * ( + ( * v2 125 ) v1 ) 4 ) 503 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":23,"rebuilds":0,"total_time":0.000033959,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( + ( + ( * v0 256 ) v1 ) 245 ) v2 ) ( min ( + ( + ( * v0 256 ) v1 ) 245 ) v2 ) )","chompy_result":{"index":51,"start_expression":"( == ( min ( + ( + ( * v0 256 ) v1 ) 245 ) v2 ) ( min ( + ( + ( * v0 256 ) v1 ) 245 ) v2 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":114,"rebuilds":2,"total_time":0.0003408749999999999,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":51,"start_expression":"( == ( min ( + ( + ( * v0 256 ) v1 ) 245 ) v2 ) ( min ( + ( + ( * v0 256 ) v1 ) 245 ) v2 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":19,"rebuilds":0,"total_time":0.000029417,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( >= ( - ( * v0 16 ) 558 ) ( - ( + ( - ( * v0 16 ) 558 ) 438 ) 1 ) )","chompy_result":{"index":52,"start_expression":"( >= ( - ( * v0 16 ) 558 ) ( - ( + ( - ( * v0 16 ) 558 ) 438 ) 1 ) )","end_expression":"1/0","result":false,"best_expr":"(>= (+ (* v0 16) -558) (+ (* v0 16) -121))","class":"../chompy-rules.txt","iterations":7,"egraph_size":2379,"rebuilds":1,"total_time":3.065852780999989,"stop_reason":"Time Limit : 0.010029541","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":52,"start_expression":"( >= ( - ( * v0 16 ) 558 ) ( - ( + ( - ( * v0 16 ) 558 ) 438 ) 1 ) )","end_expression":"1/0","result":true,"best_expr":"0","class":"CaviarAll","iterations":6,"egraph_size":1591,"rebuilds":338,"total_time":0.001200293,"stop_reason":"Goal 0 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 127 ) 32 ) 4 ) 246 ) -3 ) ( max ( min ( * ( / v1 32 ) 4 ) 281 ) 32 ) ) 67 ) 32 ) ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 127 ) 32 ) 4 ) 246 ) -3 ) ( max ( min ( * ( / v1 32 ) 4 ) 281 ) 32 ) ) 67 ) 32 ) )","chompy_result":{"index":53,"start_expression":"( == ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 127 ) 32 ) 4 ) 246 ) -3 ) ( max ( min ( * ( / v1 32 ) 4 ) 281 ) 32 ) ) 67 ) 32 ) ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 127 ) 32 ) 4 ) 246 ) -3 ) ( max ( min ( * ( / v1 32 ) 4 ) 281 ) 32 ) ) 67 ) 32 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":256,"rebuilds":2,"total_time":0.000583333,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":53,"start_expression":"( == ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 127 ) 32 ) 4 ) 246 ) -3 ) ( max ( min ( * ( / v1 32 ) 4 ) 281 ) 32 ) ) 67 ) 32 ) ( / ( + ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 127 ) 32 ) 4 ) 246 ) -3 ) ( max ( min ( * ( / v1 32 ) 4 ) 281 ) 32 ) ) 67 ) 32 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":47,"rebuilds":0,"total_time":0.000042958,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( - ( / ( min ( * ( max ( min ( / ( + ( + v0 v1 ) 1 ) 2 ) 999 ) 0 ) 8 ) 7914 ) 4 ) ( + ( * v2 4 ) v3 ) ) ( - ( / ( min ( * ( max ( min ( / ( + ( + v0 v1 ) 1 ) 2 ) 999 ) 0 ) 8 ) 7914 ) 4 ) ( + ( * v2 4 ) v3 ) ) )","chompy_result":{"index":54,"start_expression":"( == ( - ( / ( min ( * ( max ( min ( / ( + ( + v0 v1 ) 1 ) 2 ) 999 ) 0 ) 8 ) 7914 ) 4 ) ( + ( * v2 4 ) v3 ) ) ( - ( / ( min ( * ( max ( min ( / ( + ( + v0 v1 ) 1 ) 2 ) 999 ) 0 ) 8 ) 7914 ) 4 ) ( + ( * v2 4 ) v3 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":259,"rebuilds":2,"total_time":0.000553374,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":54,"start_expression":"( == ( - ( / ( min ( * ( max ( min ( / ( + ( + v0 v1 ) 1 ) 2 ) 999 ) 0 ) 8 ) 7914 ) 4 ) ( + ( * v2 4 ) v3 ) ) ( - ( / ( min ( * ( max ( min ( / ( + ( + v0 v1 ) 1 ) 2 ) 999 ) 0 ) 8 ) 7914 ) 4 ) ( + ( * v2 4 ) v3 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":41,"rebuilds":0,"total_time":0.000036126,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( + ( * v0 8 ) v1 ) ( + ( * ( / ( + ( + v2 v3 ) 249 ) 250 ) 32 ) 46 ) ) ( min ( + ( * v0 8 ) v1 ) ( + ( * ( / ( + ( + v2 v3 ) 249 ) 250 ) 32 ) 46 ) ) )","chompy_result":{"index":55,"start_expression":"( == ( min ( + ( * v0 8 ) v1 ) ( + ( * ( / ( + ( + v2 v3 ) 249 ) 250 ) 32 ) 46 ) ) ( min ( + ( * v0 8 ) v1 ) ( + ( * ( / ( + ( + v2 v3 ) 249 ) 250 ) 32 ) 46 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":190,"rebuilds":2,"total_time":0.00046587500000000003,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":55,"start_expression":"( == ( min ( + ( * v0 8 ) v1 ) ( + ( * ( / ( + ( + v2 v3 ) 249 ) 250 ) 32 ) 46 ) ) ( min ( + ( * v0 8 ) v1 ) ( + ( * ( / ( + ( + v2 v3 ) 249 ) 250 ) 32 ) 46 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":30,"rebuilds":0,"total_time":0.000030709,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( * v0 2 ) ( + ( * v1 87 ) v2 ) ) ( + ( * v0 2 ) ( + ( * v1 87 ) v2 ) ) )","chompy_result":{"index":56,"start_expression":"( == ( + ( * v0 2 ) ( + ( * v1 87 ) v2 ) ) ( + ( * v0 2 ) ( + ( * v1 87 ) v2 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":117,"rebuilds":2,"total_time":0.00033845800000000003,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":56,"start_expression":"( == ( + ( * v0 2 ) ( + ( * v1 87 ) v2 ) ) ( + ( * v0 2 ) ( + ( * v1 87 ) v2 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":19,"rebuilds":0,"total_time":0.000027582999999999997,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( >= 0 ( - ( + 0 ( / ( + ( % ( + v0 v1 ) 8 ) 220 ) 32 ) ) 1 ) )","chompy_result":{"index":57,"start_expression":"( >= 0 ( - ( + 0 ( / ( + ( % ( + v0 v1 ) 8 ) 220 ) 32 ) ) 1 ) )","end_expression":"1/0","result":false,"best_expr":"(>= 0 (+ (/ (+ (\"%\" (+ v0 v1) 8) 220) 32) -1))","class":"../chompy-rules.txt","iterations":7,"egraph_size":3583,"rebuilds":47,"total_time":3.058159669,"stop_reason":"Time Limit : 0.010018","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":57,"start_expression":"( >= 0 ( - ( + 0 ( / ( + ( % ( + v0 v1 ) 8 ) 220 ) 32 ) ) 1 ) )","end_expression":"1/0","result":true,"best_expr":"0","class":"CaviarAll","iterations":5,"egraph_size":147,"rebuilds":4,"total_time":0.000244165,"stop_reason":"Goal 0 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == 0 ( - ( + 0 ( - 18 ( max ( * v0 4 ) 14 ) ) ) 1 ) )","chompy_result":{"index":58,"start_expression":"( == 0 ( - ( + 0 ( - 18 ( max ( * v0 4 ) 14 ) ) ) 1 ) )","end_expression":"1/0","result":false,"best_expr":"(== (max (* v0 4) 14) 17)","class":"../chompy-rules.txt","iterations":6,"egraph_size":3954,"rebuilds":167,"total_time":3.079529224000002,"stop_reason":"Time Limit : 0.010022792","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":58,"start_expression":"( == 0 ( - ( + 0 ( - 18 ( max ( * v0 4 ) 14 ) ) ) 1 ) )","end_expression":"1/0","result":true,"best_expr":"0","class":"CaviarAll","iterations":8,"egraph_size":923,"rebuilds":156,"total_time":0.001105252,"stop_reason":"Goal 0 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == ( min ( min ( - 10 ( * ( max ( + ( / v0 63 ) ( - ( * v1 2 ) ( / ( - ( + v2 v0 ) 1 ) 63 ) ) ) -1 ) 8 ) ) ( - 252 ( * v3 8 ) ) ) ( + ( * ( min ( - ( - ( / ( - ( + v2 v0 ) 1 ) 63 ) ( * v1 2 ) ) ( / v0 63 ) ) 1 ) 8 ) 12 ) ) ( min ( min ( - 10 ( * ( max ( + ( / v0 63 ) ( - ( * v1 2 ) ( / ( - ( + v2 v0 ) 1 ) 63 ) ) ) -1 ) 8 ) ) ( - 252 ( * v3 8 ) ) ) ( + ( * ( min ( - ( - ( / ( - ( + v2 v0 ) 1 ) 63 ) ( * v1 2 ) ) ( / v0 63 ) ) 1 ) 8 ) 12 ) ) )","chompy_result":{"index":59,"start_expression":"( == ( min ( min ( - 10 ( * ( max ( + ( / v0 63 ) ( - ( * v1 2 ) ( / ( - ( + v2 v0 ) 1 ) 63 ) ) ) -1 ) 8 ) ) ( - 252 ( * v3 8 ) ) ) ( + ( * ( min ( - ( - ( / ( - ( + v2 v0 ) 1 ) 63 ) ( * v1 2 ) ) ( / v0 63 ) ) 1 ) 8 ) 12 ) ) ( min ( min ( - 10 ( * ( max ( + ( / v0 63 ) ( - ( * v1 2 ) ( / ( - ( + v2 v0 ) 1 ) 63 ) ) ) -1 ) 8 ) ) ( - 252 ( * v3 8 ) ) ) ( + ( * ( min ( - ( - ( / ( - ( + v2 v0 ) 1 ) 63 ) ( * v1 2 ) ) ( / v0 63 ) ) 1 ) 8 ) 12 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":387,"rebuilds":3,"total_time":0.000851792,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":59,"start_expression":"( == ( min ( min ( - 10 ( * ( max ( + ( / v0 63 ) ( - ( * v1 2 ) ( / ( - ( + v2 v0 ) 1 ) 63 ) ) ) -1 ) 8 ) ) ( - 252 ( * v3 8 ) ) ) ( + ( * ( min ( - ( - ( / ( - ( + v2 v0 ) 1 ) 63 ) ( * v1 2 ) ) ( / v0 63 ) ) 1 ) 8 ) 12 ) ) ( min ( min ( - 10 ( * ( max ( + ( / v0 63 ) ( - ( * v1 2 ) ( / ( - ( + v2 v0 ) 1 ) 63 ) ) ) -1 ) 8 ) ) ( - 252 ( * v3 8 ) ) ) ( + ( * ( min ( - ( - ( / ( - ( + v2 v0 ) 1 ) 63 ) ( * v1 2 ) ) ( / v0 63 ) ) 1 ) 8 ) 12 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":64,"rebuilds":0,"total_time":0.000061084,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( - 1939 ( + ( * v0 126 ) v1 ) ) ( + ( min v2 115 ) 10 ) ) ( min ( - 1939 ( + ( * v0 126 ) v1 ) ) ( + ( min v2 115 ) 10 ) ) )","chompy_result":{"index":60,"start_expression":"( == ( min ( - 1939 ( + ( * v0 126 ) v1 ) ) ( + ( min v2 115 ) 10 ) ) ( min ( - 1939 ( + ( * v0 126 ) v1 ) ) ( + ( min v2 115 ) 10 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":158,"rebuilds":2,"total_time":0.00051575,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":60,"start_expression":"( == ( min ( - 1939 ( + ( * v0 126 ) v1 ) ) ( + ( min v2 115 ) 10 ) ) ( min ( - 1939 ( + ( * v0 126 ) v1 ) ) ( + ( min v2 115 ) 10 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":27,"rebuilds":0,"total_time":0.000040667,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( max ( min ( + ( min ( * v0 63 ) 62 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) ( + ( max ( min ( + ( min ( * v0 63 ) 62 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) )","chompy_result":{"index":61,"start_expression":"( == ( + ( max ( min ( + ( min ( * v0 63 ) 62 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) ( + ( max ( min ( + ( min ( * v0 63 ) 62 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":213,"rebuilds":2,"total_time":0.0005501249999999999,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":61,"start_expression":"( == ( + ( max ( min ( + ( min ( * v0 63 ) 62 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) ( + ( max ( min ( + ( min ( * v0 63 ) 62 ) ( + v1 v2 ) ) 1999 ) 0 ) ( * v3 4 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":41,"rebuilds":0,"total_time":0.000045125,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( >= ( max ( / ( + ( - ( max v0 0 ) v1 ) 1 ) 32 ) 0 ) ( - ( + ( max ( / ( + ( - ( max v0 0 ) v1 ) 1 ) 32 ) 0 ) ( + ( - ( max ( / ( - ( max v0 0 ) v1 ) 32 ) -1 ) ( max ( / ( + ( - ( max v0 0 ) v1 ) 1 ) 32 ) 0 ) ) 1 ) ) 1 ) )","chompy_result":{"index":62,"start_expression":"( >= ( max ( / ( + ( - ( max v0 0 ) v1 ) 1 ) 32 ) 0 ) ( - ( + ( max ( / ( + ( - ( max v0 0 ) v1 ) 1 ) 32 ) 0 ) ( + ( - ( max ( / ( - ( max v0 0 ) v1 ) 32 ) -1 ) ( max ( / ( + ( - ( max v0 0 ) v1 ) 1 ) 32 ) 0 ) ) 1 ) ) 1 ) )","end_expression":"1/0","result":false,"best_expr":"(>= (max 0 (/ (+ (max 0 v0) (- 1 v1)) 32)) (max -1 (/ (+ (max 0 v0) (- 0 v1)) 32)))","class":"../chompy-rules.txt","iterations":6,"egraph_size":3192,"rebuilds":60,"total_time":3.126213467,"stop_reason":"Time Limit : 0.010003916","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":62,"start_expression":"( >= ( max ( / ( + ( - ( max v0 0 ) v1 ) 1 ) 32 ) 0 ) ( - ( + ( max ( / ( + ( - ( max v0 0 ) v1 ) 1 ) 32 ) 0 ) ( + ( - ( max ( / ( - ( max v0 0 ) v1 ) 32 ) -1 ) ( max ( / ( + ( - ( max v0 0 ) v1 ) 1 ) 32 ) 0 ) ) 1 ) ) 1 ) )","end_expression":"1/0","result":false,"best_expr":"(<= (/ (+ (max 0 v0) (- 0 v1)) 32) (max (/ (+ (+ -1 v1) (* -1 v0)) -32) (max 0 (/ (+ -1 v1) -32))))","class":"CaviarAll","iterations":8,"egraph_size":5300,"rebuilds":2554,"total_time":3.222501153999999,"stop_reason":"Time Limit : 0.010021","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( - ( * ( min ( * ( / ( + ( + v0 v1 ) 447 ) 32 ) 4 ) ( + ( * ( + ( / v1 32 ) ( * v2 48 ) ) 4 ) 115 ) ) 2 ) ( / ( min ( * ( + ( / v1 32 ) ( * v2 48 ) ) 32 ) ( + ( * ( min ( * ( / ( + ( + v0 v1 ) 447 ) 32 ) 4 ) ( - ( * ( + ( / v1 32 ) ( * v2 48 ) ) 4 ) 77 ) ) 8 ) 609 ) ) 4 ) ) ( - ( * ( min ( * ( / ( + ( + v0 v1 ) 447 ) 32 ) 4 ) ( + ( * ( + ( / v1 32 ) ( * v2 48 ) ) 4 ) 115 ) ) 2 ) ( / ( min ( * ( + ( / v1 32 ) ( * v2 48 ) ) 32 ) ( + ( * ( min ( * ( / ( + ( + v0 v1 ) 447 ) 32 ) 4 ) ( - ( * ( + ( / v1 32 ) ( * v2 48 ) ) 4 ) 77 ) ) 8 ) 609 ) ) 4 ) ) )","chompy_result":{"index":63,"start_expression":"( == ( - ( * ( min ( * ( / ( + ( + v0 v1 ) 447 ) 32 ) 4 ) ( + ( * ( + ( / v1 32 ) ( * v2 48 ) ) 4 ) 115 ) ) 2 ) ( / ( min ( * ( + ( / v1 32 ) ( * v2 48 ) ) 32 ) ( + ( * ( min ( * ( / ( + ( + v0 v1 ) 447 ) 32 ) 4 ) ( - ( * ( + ( / v1 32 ) ( * v2 48 ) ) 4 ) 77 ) ) 8 ) 609 ) ) 4 ) ) ( - ( * ( min ( * ( / ( + ( + v0 v1 ) 447 ) 32 ) 4 ) ( + ( * ( + ( / v1 32 ) ( * v2 48 ) ) 4 ) 115 ) ) 2 ) ( / ( min ( * ( + ( / v1 32 ) ( * v2 48 ) ) 32 ) ( + ( * ( min ( * ( / ( + ( + v0 v1 ) 447 ) 32 ) 4 ) ( - ( * ( + ( / v1 32 ) ( * v2 48 ) ) 4 ) 77 ) ) 8 ) 609 ) ) 4 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":348,"rebuilds":2,"total_time":0.0007973349999999999,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":63,"start_expression":"( == ( - ( * ( min ( * ( / ( + ( + v0 v1 ) 447 ) 32 ) 4 ) ( + ( * ( + ( / v1 32 ) ( * v2 48 ) ) 4 ) 115 ) ) 2 ) ( / ( min ( * ( + ( / v1 32 ) ( * v2 48 ) ) 32 ) ( + ( * ( min ( * ( / ( + ( + v0 v1 ) 447 ) 32 ) 4 ) ( - ( * ( + ( / v1 32 ) ( * v2 48 ) ) 4 ) 77 ) ) 8 ) 609 ) ) 4 ) ) ( - ( * ( min ( * ( / ( + ( + v0 v1 ) 447 ) 32 ) 4 ) ( + ( * ( + ( / v1 32 ) ( * v2 48 ) ) 4 ) 115 ) ) 2 ) ( / ( min ( * ( + ( / v1 32 ) ( * v2 48 ) ) 32 ) ( + ( * ( min ( * ( / ( + ( + v0 v1 ) 447 ) 32 ) 4 ) ( - ( * ( + ( / v1 32 ) ( * v2 48 ) ) 4 ) 77 ) ) 8 ) 609 ) ) 4 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":65,"rebuilds":0,"total_time":0.000073667,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( - ( min ( + ( min ( + ( * v0 4 ) v1 ) ( + ( min v1 v2 ) 8 ) ) 4 ) ( + ( * ( / ( + ( min ( * v0 4 ) ( + ( - ( + ( * v3 -12 ) v4 ) v1 ) 8 ) ) 7 ) 4 ) 4 ) v1 ) ) ( * v0 4 ) ) ( - ( min ( + ( min ( + ( * v0 4 ) v1 ) ( + ( min v1 v2 ) 8 ) ) 4 ) ( + ( * ( / ( + ( min ( * v0 4 ) ( + ( - ( + ( * v3 -12 ) v4 ) v1 ) 8 ) ) 7 ) 4 ) 4 ) v1 ) ) ( * v0 4 ) ) )","chompy_result":{"index":64,"start_expression":"( == ( - ( min ( + ( min ( + ( * v0 4 ) v1 ) ( + ( min v1 v2 ) 8 ) ) 4 ) ( + ( * ( / ( + ( min ( * v0 4 ) ( + ( - ( + ( * v3 -12 ) v4 ) v1 ) 8 ) ) 7 ) 4 ) 4 ) v1 ) ) ( * v0 4 ) ) ( - ( min ( + ( min ( + ( * v0 4 ) v1 ) ( + ( min v1 v2 ) 8 ) ) 4 ) ( + ( * ( / ( + ( min ( * v0 4 ) ( + ( - ( + ( * v3 -12 ) v4 ) v1 ) 8 ) ) 7 ) 4 ) 4 ) v1 ) ) ( * v0 4 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":364,"rebuilds":2,"total_time":0.000813876,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":64,"start_expression":"( == ( - ( min ( + ( min ( + ( * v0 4 ) v1 ) ( + ( min v1 v2 ) 8 ) ) 4 ) ( + ( * ( / ( + ( min ( * v0 4 ) ( + ( - ( + ( * v3 -12 ) v4 ) v1 ) 8 ) ) 7 ) 4 ) 4 ) v1 ) ) ( * v0 4 ) ) ( - ( min ( + ( min ( + ( * v0 4 ) v1 ) ( + ( min v1 v2 ) 8 ) ) 4 ) ( + ( * ( / ( + ( min ( * v0 4 ) ( + ( - ( + ( * v3 -12 ) v4 ) v1 ) 8 ) ) 7 ) 4 ) 4 ) v1 ) ) ( * v0 4 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":65,"rebuilds":0,"total_time":0.00006116699999999999,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( >= ( - v0 5 ) ( - ( + ( - v0 5 ) 15 ) 1 ) )","chompy_result":{"index":65,"start_expression":"( >= ( - v0 5 ) ( - ( + ( - v0 5 ) 15 ) 1 ) )","end_expression":"1/0","result":false,"best_expr":"(>= (+ v0 -5) (+ v0 9))","class":"../chompy-rules.txt","iterations":7,"egraph_size":1938,"rebuilds":4,"total_time":3.083708044999999,"stop_reason":"Time Limit : 0.010011541","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":65,"start_expression":"( >= ( - v0 5 ) ( - ( + ( - v0 5 ) 15 ) 1 ) )","end_expression":"1/0","result":true,"best_expr":"0","class":"CaviarAll","iterations":6,"egraph_size":1432,"rebuilds":361,"total_time":0.001266209,"stop_reason":"Goal 0 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == ( + ( * ( / ( + ( min ( + ( * v0 -1011 ) ( - v1 v2 ) ) 1000 ) 16 ) 64 ) 64 ) ( * v0 1011 ) ) ( + ( * ( / ( + ( min ( + ( * v0 -1011 ) ( - v1 v2 ) ) 1000 ) 16 ) 64 ) 64 ) ( * v0 1011 ) ) )","chompy_result":{"index":66,"start_expression":"( == ( + ( * ( / ( + ( min ( + ( * v0 -1011 ) ( - v1 v2 ) ) 1000 ) 16 ) 64 ) 64 ) ( * v0 1011 ) ) ( + ( * ( / ( + ( min ( + ( * v0 -1011 ) ( - v1 v2 ) ) 1000 ) 16 ) 64 ) 64 ) ( * v0 1011 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":184,"rebuilds":2,"total_time":0.00047679,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":66,"start_expression":"( == ( + ( * ( / ( + ( min ( + ( * v0 -1011 ) ( - v1 v2 ) ) 1000 ) 16 ) 64 ) 64 ) ( * v0 1011 ) ) ( + ( * ( / ( + ( min ( + ( * v0 -1011 ) ( - v1 v2 ) ) 1000 ) 16 ) 64 ) 64 ) ( * v0 1011 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":39,"rebuilds":0,"total_time":0.000045916,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( * v0 16 ) ( + ( * ( / ( + v1 v2 ) 8 ) 2 ) ( + ( * v3 8 ) v4 ) ) ) ( + ( * v0 16 ) ( + ( * ( / ( + v1 v2 ) 8 ) 2 ) ( + ( * v3 8 ) v4 ) ) ) )","chompy_result":{"index":67,"start_expression":"( == ( + ( * v0 16 ) ( + ( * ( / ( + v1 v2 ) 8 ) 2 ) ( + ( * v3 8 ) v4 ) ) ) ( + ( * v0 16 ) ( + ( * ( / ( + v1 v2 ) 8 ) 2 ) ( + ( * v3 8 ) v4 ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":215,"rebuilds":2,"total_time":0.000531791,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":67,"start_expression":"( == ( + ( * v0 16 ) ( + ( * ( / ( + v1 v2 ) 8 ) 2 ) ( + ( * v3 8 ) v4 ) ) ) ( + ( * v0 16 ) ( + ( * ( / ( + v1 v2 ) 8 ) 2 ) ( + ( * v3 8 ) v4 ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":31,"rebuilds":0,"total_time":0.000041083,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( >= ( max ( - -1012 ( * v0 8 ) ) ( + ( * v0 8 ) 7 ) ) 0 )","chompy_result":{"index":68,"start_expression":"( >= ( max ( - -1012 ( * v0 8 ) ) ( + ( * v0 8 ) 7 ) ) 0 )","end_expression":"1/0","result":false,"best_expr":"(>= (max (+ -1012 (* v0 -8)) (+ (* v0 8) 7)) 0)","class":"../chompy-rules.txt","iterations":7,"egraph_size":3137,"rebuilds":18,"total_time":3.0457385540000006,"stop_reason":"Time Limit : 0.010018333","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":68,"start_expression":"( >= ( max ( - -1012 ( * v0 8 ) ) ( + ( * v0 8 ) 7 ) ) 0 )","end_expression":"1/0","result":false,"best_expr":"(! (&& (< -127 v0) (< v0 0)))","class":"CaviarAll","iterations":6,"egraph_size":714,"rebuilds":119,"total_time":0.0008686659999999999,"stop_reason":"Impossible (! (&& (< ?a ?x) (< ?x ?b))) Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == ( min ( + ( max ( min ( + v0 v1 ) 2002 ) 3 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 1745 ) -254 ) 254 ) ) ( min ( + ( max ( min ( + v0 v1 ) 2002 ) 3 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 1745 ) -254 ) 254 ) ) )","chompy_result":{"index":69,"start_expression":"( == ( min ( + ( max ( min ( + v0 v1 ) 2002 ) 3 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 1745 ) -254 ) 254 ) ) ( min ( + ( max ( min ( + v0 v1 ) 2002 ) 3 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 1745 ) -254 ) 254 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":216,"rebuilds":2,"total_time":0.0005297090000000001,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":69,"start_expression":"( == ( min ( + ( max ( min ( + v0 v1 ) 2002 ) 3 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 1745 ) -254 ) 254 ) ) ( min ( + ( max ( min ( + v0 v1 ) 2002 ) 3 ) ( * v2 4 ) ) ( + ( max ( min ( + v0 v1 ) 1745 ) -254 ) 254 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":49,"rebuilds":0,"total_time":0.000045875,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( min ( - ( - ( * v0 8 ) ( * v1 1236 ) ) ( * v2 8 ) ) 1224 ) ( * v3 -8 ) ) ( + ( min ( - ( - ( * v0 8 ) ( * v1 1236 ) ) ( * v2 8 ) ) 1224 ) ( * v3 -8 ) ) )","chompy_result":{"index":70,"start_expression":"( == ( + ( min ( - ( - ( * v0 8 ) ( * v1 1236 ) ) ( * v2 8 ) ) 1224 ) ( * v3 -8 ) ) ( + ( min ( - ( - ( * v0 8 ) ( * v1 1236 ) ) ( * v2 8 ) ) 1224 ) ( * v3 -8 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":195,"rebuilds":2,"total_time":0.000481958,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":70,"start_expression":"( == ( + ( min ( - ( - ( * v0 8 ) ( * v1 1236 ) ) ( * v2 8 ) ) 1224 ) ( * v3 -8 ) ) ( + ( min ( - ( - ( * v0 8 ) ( * v1 1236 ) ) ( * v2 8 ) ) 1224 ) ( * v3 -8 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":34,"rebuilds":0,"total_time":0.000037666,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( / ( + ( - ( / ( + v0 2 ) 8 ) ( * ( / ( - ( max ( min v1 2002 ) 3 ) 3 ) 16 ) 2 ) ) 66 ) 64 ) ( / ( + ( - ( / ( + v0 2 ) 8 ) ( * ( / ( - ( max ( min v1 2002 ) 3 ) 3 ) 16 ) 2 ) ) 66 ) 64 ) )","chompy_result":{"index":71,"start_expression":"( == ( / ( + ( - ( / ( + v0 2 ) 8 ) ( * ( / ( - ( max ( min v1 2002 ) 3 ) 3 ) 16 ) 2 ) ) 66 ) 64 ) ( / ( + ( - ( / ( + v0 2 ) 8 ) ( * ( / ( - ( max ( min v1 2002 ) 3 ) 3 ) 16 ) 2 ) ) 66 ) 64 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":196,"rebuilds":2,"total_time":0.000492625,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":71,"start_expression":"( == ( / ( + ( - ( / ( + v0 2 ) 8 ) ( * ( / ( - ( max ( min v1 2002 ) 3 ) 3 ) 16 ) 2 ) ) 66 ) 64 ) ( / ( + ( - ( / ( + v0 2 ) 8 ) ( * ( / ( - ( max ( min v1 2002 ) 3 ) 3 ) 16 ) 2 ) ) 66 ) 64 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":36,"rebuilds":0,"total_time":0.000036834,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( max ( min ( / v0 8 ) 256 ) 7 ) ( * v1 128 ) ) ( + ( max ( min ( / v0 8 ) 256 ) 7 ) ( * v1 128 ) ) )","chompy_result":{"index":72,"start_expression":"( == ( + ( max ( min ( / v0 8 ) 256 ) 7 ) ( * v1 128 ) ) ( + ( max ( min ( / v0 8 ) 256 ) 7 ) ( * v1 128 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":119,"rebuilds":2,"total_time":0.000346876,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":72,"start_expression":"( == ( + ( max ( min ( / v0 8 ) 256 ) 7 ) ( * v1 128 ) ) ( + ( max ( min ( / v0 8 ) 256 ) 7 ) ( * v1 128 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":25,"rebuilds":0,"total_time":0.000032041999999999996,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( * v0 -64 ) ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) v3 ) ) ( + ( * v0 -64 ) ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) v3 ) ) )","chompy_result":{"index":73,"start_expression":"( == ( + ( * v0 -64 ) ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) v3 ) ) ( + ( * v0 -64 ) ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) v3 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":153,"rebuilds":2,"total_time":0.00044024900000000003,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":73,"start_expression":"( == ( + ( * v0 -64 ) ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) v3 ) ) ( + ( * v0 -64 ) ( - ( / ( + ( + v1 v2 ) 7 ) 8 ) v3 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":24,"rebuilds":0,"total_time":0.000028666,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( - ( + ( min ( - ( max ( min v0 999 ) 0 ) ( * v1 32 ) ) ( + ( + ( max ( min ( / v2 2 ) 999 ) 0 ) ( * v3 16 ) ) 15 ) ) ( * v3 -16 ) ) ( + ( max ( min ( / v2 2 ) 999 ) 0 ) ( * v4 2 ) ) ) ( - ( + ( min ( - ( max ( min v0 999 ) 0 ) ( * v1 32 ) ) ( + ( + ( max ( min ( / v2 2 ) 999 ) 0 ) ( * v3 16 ) ) 15 ) ) ( * v3 -16 ) ) ( + ( max ( min ( / v2 2 ) 999 ) 0 ) ( * v4 2 ) ) ) )","chompy_result":{"index":74,"start_expression":"( == ( - ( + ( min ( - ( max ( min v0 999 ) 0 ) ( * v1 32 ) ) ( + ( + ( max ( min ( / v2 2 ) 999 ) 0 ) ( * v3 16 ) ) 15 ) ) ( * v3 -16 ) ) ( + ( max ( min ( / v2 2 ) 999 ) 0 ) ( * v4 2 ) ) ) ( - ( + ( min ( - ( max ( min v0 999 ) 0 ) ( * v1 32 ) ) ( + ( + ( max ( min ( / v2 2 ) 999 ) 0 ) ( * v3 16 ) ) 15 ) ) ( * v3 -16 ) ) ( + ( max ( min ( / v2 2 ) 999 ) 0 ) ( * v4 2 ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":392,"rebuilds":2,"total_time":0.000725042,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":74,"start_expression":"( == ( - ( + ( min ( - ( max ( min v0 999 ) 0 ) ( * v1 32 ) ) ( + ( + ( max ( min ( / v2 2 ) 999 ) 0 ) ( * v3 16 ) ) 15 ) ) ( * v3 -16 ) ) ( + ( max ( min ( / v2 2 ) 999 ) 0 ) ( * v4 2 ) ) ) ( - ( + ( min ( - ( max ( min v0 999 ) 0 ) ( * v1 32 ) ) ( + ( + ( max ( min ( / v2 2 ) 999 ) 0 ) ( * v3 16 ) ) 15 ) ) ( * v3 -16 ) ) ( + ( max ( min ( / v2 2 ) 999 ) 0 ) ( * v4 2 ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":59,"rebuilds":0,"total_time":0.000039084,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 31 ) 8 ) 249 ) 0 ) ( max ( min ( / v1 8 ) 250 ) 1 ) ) 126 ) 125 ) ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 31 ) 8 ) 249 ) 0 ) ( max ( min ( / v1 8 ) 250 ) 1 ) ) 126 ) 125 ) )","chompy_result":{"index":75,"start_expression":"( == ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 31 ) 8 ) 249 ) 0 ) ( max ( min ( / v1 8 ) 250 ) 1 ) ) 126 ) 125 ) ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 31 ) 8 ) 249 ) 0 ) ( max ( min ( / v1 8 ) 250 ) 1 ) ) 126 ) 125 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":231,"rebuilds":2,"total_time":0.0005153760000000001,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":75,"start_expression":"( == ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 31 ) 8 ) 249 ) 0 ) ( max ( min ( / v1 8 ) 250 ) 1 ) ) 126 ) 125 ) ( / ( + ( - ( max ( min ( / ( + ( + v0 v1 ) 31 ) 8 ) 249 ) 0 ) ( max ( min ( / v1 8 ) 250 ) 1 ) ) 126 ) 125 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":40,"rebuilds":0,"total_time":0.000034875,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 63 ) ( / v1 63 ) ) 8 ) 93 ) 86 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 63 ) ( / v1 63 ) ) 8 ) 93 ) 86 ) )","chompy_result":{"index":76,"start_expression":"( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 63 ) ( / v1 63 ) ) 8 ) 93 ) 86 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 63 ) ( / v1 63 ) ) 8 ) 93 ) 86 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":161,"rebuilds":2,"total_time":0.000420666,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":76,"start_expression":"( == ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 63 ) ( / v1 63 ) ) 8 ) 93 ) 86 ) ( / ( + ( * ( - ( / ( - ( + v0 v1 ) 1 ) 63 ) ( / v1 63 ) ) 8 ) 93 ) 86 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":24,"rebuilds":0,"total_time":0.000028167000000000003,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( max ( min ( max ( / ( + ( - v0 ( * v1 8 ) ) 31 ) 32 ) 0 ) ( + ( / ( - ( max v2 0 ) v1 ) 4 ) 1 ) ) ( + ( min ( min ( / ( - ( - ( + v3 v0 ) ( * v1 8 ) ) 1 ) 32 ) ( / ( - ( - ( max v2 0 ) v1 ) 3 ) 4 ) ) ( / ( - ( max v2 0 ) v1 ) 4 ) ) 1 ) ) ( max ( min ( max ( / ( + ( - v0 ( * v1 8 ) ) 31 ) 32 ) 0 ) ( + ( / ( - ( max v2 0 ) v1 ) 4 ) 1 ) ) ( + ( min ( min ( / ( - ( - ( + v3 v0 ) ( * v1 8 ) ) 1 ) 32 ) ( / ( - ( - ( max v2 0 ) v1 ) 3 ) 4 ) ) ( / ( - ( max v2 0 ) v1 ) 4 ) ) 1 ) ) )","chompy_result":{"index":77,"start_expression":"( == ( max ( min ( max ( / ( + ( - v0 ( * v1 8 ) ) 31 ) 32 ) 0 ) ( + ( / ( - ( max v2 0 ) v1 ) 4 ) 1 ) ) ( + ( min ( min ( / ( - ( - ( + v3 v0 ) ( * v1 8 ) ) 1 ) 32 ) ( / ( - ( - ( max v2 0 ) v1 ) 3 ) 4 ) ) ( / ( - ( max v2 0 ) v1 ) 4 ) ) 1 ) ) ( max ( min ( max ( / ( + ( - v0 ( * v1 8 ) ) 31 ) 32 ) 0 ) ( + ( / ( - ( max v2 0 ) v1 ) 4 ) 1 ) ) ( + ( min ( min ( / ( - ( - ( + v3 v0 ) ( * v1 8 ) ) 1 ) 32 ) ( / ( - ( - ( max v2 0 ) v1 ) 3 ) 4 ) ) ( / ( - ( max v2 0 ) v1 ) 4 ) ) 1 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":457,"rebuilds":2,"total_time":0.000830332,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":77,"start_expression":"( == ( max ( min ( max ( / ( + ( - v0 ( * v1 8 ) ) 31 ) 32 ) 0 ) ( + ( / ( - ( max v2 0 ) v1 ) 4 ) 1 ) ) ( + ( min ( min ( / ( - ( - ( + v3 v0 ) ( * v1 8 ) ) 1 ) 32 ) ( / ( - ( - ( max v2 0 ) v1 ) 3 ) 4 ) ) ( / ( - ( max v2 0 ) v1 ) 4 ) ) 1 ) ) ( max ( min ( max ( / ( + ( - v0 ( * v1 8 ) ) 31 ) 32 ) 0 ) ( + ( / ( - ( max v2 0 ) v1 ) 4 ) 1 ) ) ( + ( min ( min ( / ( - ( - ( + v3 v0 ) ( * v1 8 ) ) 1 ) 32 ) ( / ( - ( - ( max v2 0 ) v1 ) 3 ) 4 ) ) ( / ( - ( max v2 0 ) v1 ) 4 ) ) 1 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":65,"rebuilds":0,"total_time":0.000041792,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( - v0 ( + ( * v1 4 ) ( + ( * v2 60 ) v3 ) ) ) ( - v0 ( + ( * v1 4 ) ( + ( * v2 60 ) v3 ) ) ) )","chompy_result":{"index":78,"start_expression":"( == ( - v0 ( + ( * v1 4 ) ( + ( * v2 60 ) v3 ) ) ) ( - v0 ( + ( * v1 4 ) ( + ( * v2 60 ) v3 ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":165,"rebuilds":2,"total_time":0.000405125,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":78,"start_expression":"( == ( - v0 ( + ( * v1 4 ) ( + ( * v2 60 ) v3 ) ) ) ( - v0 ( + ( * v1 4 ) ( + ( * v2 60 ) v3 ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":23,"rebuilds":0,"total_time":0.000027749,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( / ( + ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 63 ) 8 ) 244 ) -5 ) ( max ( min ( * ( / v1 63 ) 8 ) 285 ) 36 ) ) 105 ) 63 ) ( / ( + ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 63 ) 8 ) 244 ) -5 ) ( max ( min ( * ( / v1 63 ) 8 ) 285 ) 36 ) ) 105 ) 63 ) )","chompy_result":{"index":79,"start_expression":"( == ( / ( + ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 63 ) 8 ) 244 ) -5 ) ( max ( min ( * ( / v1 63 ) 8 ) 285 ) 36 ) ) 105 ) 63 ) ( / ( + ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 63 ) 8 ) 244 ) -5 ) ( max ( min ( * ( / v1 63 ) 8 ) 285 ) 36 ) ) 105 ) 63 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":263,"rebuilds":2,"total_time":0.0005682910000000001,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":79,"start_expression":"( == ( / ( + ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 63 ) 8 ) 244 ) -5 ) ( max ( min ( * ( / v1 63 ) 8 ) 285 ) 36 ) ) 105 ) 63 ) ( / ( + ( - ( max ( min ( * ( / ( - ( + v0 v1 ) 1 ) 63 ) 8 ) 244 ) -5 ) ( max ( min ( * ( / v1 63 ) 8 ) 285 ) 36 ) ) 105 ) 63 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":47,"rebuilds":0,"total_time":0.000036540999999999995,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( - ( - ( / ( - ( + v0 v1 ) 1 ) 8 ) ( * v2 125 ) ) ( / v1 8 ) ) ( - ( - ( / ( - ( + v0 v1 ) 1 ) 8 ) ( * v2 125 ) ) ( / v1 8 ) ) )","chompy_result":{"index":80,"start_expression":"( == ( - ( - ( / ( - ( + v0 v1 ) 1 ) 8 ) ( * v2 125 ) ) ( / v1 8 ) ) ( - ( - ( / ( - ( + v0 v1 ) 1 ) 8 ) ( * v2 125 ) ) ( / v1 8 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":184,"rebuilds":2,"total_time":0.00043154099999999997,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":80,"start_expression":"( == ( - ( - ( / ( - ( + v0 v1 ) 1 ) 8 ) ( * v2 125 ) ) ( / v1 8 ) ) ( - ( - ( / ( - ( + v0 v1 ) 1 ) 8 ) ( * v2 125 ) ) ( / v1 8 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":23,"rebuilds":0,"total_time":0.000027126,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( * ( + ( * ( max ( min ( / v0 63 ) 31 ) 0 ) 16 ) v1 ) 4 ) ( + ( * ( max ( min ( / ( - ( + v2 v0 ) 1 ) 63 ) 31 ) 0 ) 64 ) 158 ) ) ( min ( * ( + ( * ( max ( min ( / v0 63 ) 31 ) 0 ) 16 ) v1 ) 4 ) ( + ( * ( max ( min ( / ( - ( + v2 v0 ) 1 ) 63 ) 31 ) 0 ) 64 ) 158 ) ) )","chompy_result":{"index":81,"start_expression":"( == ( min ( * ( + ( * ( max ( min ( / v0 63 ) 31 ) 0 ) 16 ) v1 ) 4 ) ( + ( * ( max ( min ( / ( - ( + v2 v0 ) 1 ) 63 ) 31 ) 0 ) 64 ) 158 ) ) ( min ( * ( + ( * ( max ( min ( / v0 63 ) 31 ) 0 ) 16 ) v1 ) 4 ) ( + ( * ( max ( min ( / ( - ( + v2 v0 ) 1 ) 63 ) 31 ) 0 ) 64 ) 158 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":301,"rebuilds":2,"total_time":0.0006927079999999999,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":81,"start_expression":"( == ( min ( * ( + ( * ( max ( min ( / v0 63 ) 31 ) 0 ) 16 ) v1 ) 4 ) ( + ( * ( max ( min ( / ( - ( + v2 v0 ) 1 ) 63 ) 31 ) 0 ) 64 ) 158 ) ) ( min ( * ( + ( * ( max ( min ( / v0 63 ) 31 ) 0 ) 16 ) v1 ) 4 ) ( + ( * ( max ( min ( / ( - ( + v2 v0 ) 1 ) 63 ) 31 ) 0 ) 64 ) 158 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":47,"rebuilds":0,"total_time":0.00004375,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( / ( + ( * ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 124 ) 125 ) 16 ) 204 ) -45 ) ( max ( min ( * ( / v1 125 ) 16 ) 286 ) 37 ) ) 4 ) 579 ) 250 ) ( / ( + ( * ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 124 ) 125 ) 16 ) 204 ) -45 ) ( max ( min ( * ( / v1 125 ) 16 ) 286 ) 37 ) ) 4 ) 579 ) 250 ) )","chompy_result":{"index":82,"start_expression":"( == ( / ( + ( * ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 124 ) 125 ) 16 ) 204 ) -45 ) ( max ( min ( * ( / v1 125 ) 16 ) 286 ) 37 ) ) 4 ) 579 ) 250 ) ( / ( + ( * ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 124 ) 125 ) 16 ) 204 ) -45 ) ( max ( min ( * ( / v1 125 ) 16 ) 286 ) 37 ) ) 4 ) 579 ) 250 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":272,"rebuilds":2,"total_time":0.000597959,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":82,"start_expression":"( == ( / ( + ( * ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 124 ) 125 ) 16 ) 204 ) -45 ) ( max ( min ( * ( / v1 125 ) 16 ) 286 ) 37 ) ) 4 ) 579 ) 250 ) ( / ( + ( * ( - ( max ( min ( * ( / ( + ( + v0 v1 ) 124 ) 125 ) 16 ) 204 ) -45 ) ( max ( min ( * ( / v1 125 ) 16 ) 286 ) 37 ) ) 4 ) 579 ) 250 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":52,"rebuilds":0,"total_time":0.000040375,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( * v0 17 ) ( * ( / v1 63 ) 8 ) ) ( + ( * v0 17 ) ( * ( / v1 63 ) 8 ) ) )","chompy_result":{"index":83,"start_expression":"( == ( + ( * v0 17 ) ( * ( / v1 63 ) 8 ) ) ( + ( * v0 17 ) ( * ( / v1 63 ) 8 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":88,"rebuilds":2,"total_time":0.000328584,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":83,"start_expression":"( == ( + ( * v0 17 ) ( * ( / v1 63 ) 8 ) ) ( + ( * v0 17 ) ( * ( / v1 63 ) 8 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":16,"rebuilds":0,"total_time":0.0000335,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 8 ) v1 ) 0 ) ( + ( + ( * v0 8 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 8 ) v1 ) 7 ) ( + ( + ( * v0 8 ) v1 ) ( - ( + 8 0 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= ( - ( + 7 0 ) 1 ) ( - ( + 7 0 ) 1 ) ) )","chompy_result":{"index":84,"start_expression":"( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 8 ) v1 ) 0 ) ( + ( + ( * v0 8 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 8 ) v1 ) 7 ) ( + ( + ( * v0 8 ) v1 ) ( - ( + 8 0 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= ( - ( + 7 0 ) 1 ) ( - ( + 7 0 ) 1 ) ) )","end_expression":"1/0","result":false,"best_expr":"(!= 0 (>= (+ (* v0 8) (+ v1 7)) (+ (* v0 8) (+ v1 7))))","class":"../chompy-rules.txt","iterations":6,"egraph_size":3211,"rebuilds":270,"total_time":3.0893020649999987,"stop_reason":"Time Limit : 0.01003175","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":84,"start_expression":"( && ( && ( && ( && ( && ( && 1 ( <= ( + ( + ( * v0 8 ) v1 ) 0 ) ( + ( + ( * v0 8 ) v1 ) 0 ) ) ) ( >= ( + ( + ( * v0 8 ) v1 ) 7 ) ( + ( + ( * v0 8 ) v1 ) ( - ( + 8 0 ) 1 ) ) ) ) ( <= 0 0 ) ) ( >= 0 0 ) ) ( <= 0 0 ) ) ( >= ( - ( + 7 0 ) 1 ) ( - ( + 7 0 ) 1 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":2,"egraph_size":42,"rebuilds":4,"total_time":0.00010316600000000001,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == 0 ( - ( + 0 ( - 34 ( max ( * v0 4 ) 30 ) ) ) 1 ) )","chompy_result":{"index":85,"start_expression":"( == 0 ( - ( + 0 ( - 34 ( max ( * v0 4 ) 30 ) ) ) 1 ) )","end_expression":"1/0","result":false,"best_expr":"(== (max (* v0 4) 30) 33)","class":"../chompy-rules.txt","iterations":4,"egraph_size":410,"rebuilds":2,"total_time":3.0929252180000066,"stop_reason":"Time Limit : 0.010032042","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":85,"start_expression":"( == 0 ( - ( + 0 ( - 34 ( max ( * v0 4 ) 30 ) ) ) 1 ) )","end_expression":"1/0","result":true,"best_expr":"0","class":"CaviarAll","iterations":8,"egraph_size":923,"rebuilds":156,"total_time":0.001144462,"stop_reason":"Goal 0 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( >= ( + ( - ( max ( + v0 v1 ) 1995 ) ( min v1 3 ) ) 509 ) 0 )","chompy_result":{"index":86,"start_expression":"( >= ( + ( - ( max ( + v0 v1 ) 1995 ) ( min v1 3 ) ) 509 ) 0 )","end_expression":"1/0","result":false,"best_expr":"(>= (- (max (+ v0 v1) 1995) (+ (min v1 3) -509)) 0)","class":"../chompy-rules.txt","iterations":6,"egraph_size":2924,"rebuilds":1,"total_time":3.1051476279999988,"stop_reason":"Time Limit : 0.010015625","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":86,"start_expression":"( >= ( + ( - ( max ( + v0 v1 ) 1995 ) ( min v1 3 ) ) 509 ) 0 )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":3,"egraph_size":120,"rebuilds":0,"total_time":0.014135748000000002,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( / ( + v0 v1 ) 2 ) ( * v2 24 ) ) ( + ( / ( + v0 v1 ) 2 ) ( * v2 24 ) ) )","chompy_result":{"index":87,"start_expression":"( == ( + ( / ( + v0 v1 ) 2 ) ( * v2 24 ) ) ( + ( / ( + v0 v1 ) 2 ) ( * v2 24 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":102,"rebuilds":2,"total_time":0.00036291700000000004,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":87,"start_expression":"( == ( + ( / ( + v0 v1 ) 2 ) ( * v2 24 ) ) ( + ( / ( + v0 v1 ) 2 ) ( * v2 24 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":19,"rebuilds":0,"total_time":0.000044667000000000004,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( - ( / ( - ( min ( * ( / v0 65 ) 64 ) 4 ) 6 ) 32 ) ( min ( / ( + ( min ( * ( / v0 65 ) 64 ) 4 ) 346 ) 32 ) ( - ( / ( + ( max ( + ( min ( * ( / v0 65 ) 64 ) 4 ) v1 ) 1975 ) 40 ) 32 ) ( * v2 12 ) ) ) ) ( - ( / ( - ( min ( * ( / v0 65 ) 64 ) 4 ) 6 ) 32 ) ( min ( / ( + ( min ( * ( / v0 65 ) 64 ) 4 ) 346 ) 32 ) ( - ( / ( + ( max ( + ( min ( * ( / v0 65 ) 64 ) 4 ) v1 ) 1975 ) 40 ) 32 ) ( * v2 12 ) ) ) ) )","chompy_result":{"index":88,"start_expression":"( == ( - ( / ( - ( min ( * ( / v0 65 ) 64 ) 4 ) 6 ) 32 ) ( min ( / ( + ( min ( * ( / v0 65 ) 64 ) 4 ) 346 ) 32 ) ( - ( / ( + ( max ( + ( min ( * ( / v0 65 ) 64 ) 4 ) v1 ) 1975 ) 40 ) 32 ) ( * v2 12 ) ) ) ) ( - ( / ( - ( min ( * ( / v0 65 ) 64 ) 4 ) 6 ) 32 ) ( min ( / ( + ( min ( * ( / v0 65 ) 64 ) 4 ) 346 ) 32 ) ( - ( / ( + ( max ( + ( min ( * ( / v0 65 ) 64 ) 4 ) v1 ) 1975 ) 40 ) 32 ) ( * v2 12 ) ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":287,"rebuilds":2,"total_time":0.000617916,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":88,"start_expression":"( == ( - ( / ( - ( min ( * ( / v0 65 ) 64 ) 4 ) 6 ) 32 ) ( min ( / ( + ( min ( * ( / v0 65 ) 64 ) 4 ) 346 ) 32 ) ( - ( / ( + ( max ( + ( min ( * ( / v0 65 ) 64 ) 4 ) v1 ) 1975 ) 40 ) 32 ) ( * v2 12 ) ) ) ) ( - ( / ( - ( min ( * ( / v0 65 ) 64 ) 4 ) 6 ) 32 ) ( min ( / ( + ( min ( * ( / v0 65 ) 64 ) 4 ) 346 ) 32 ) ( - ( / ( + ( max ( + ( min ( * ( / v0 65 ) 64 ) 4 ) v1 ) 1975 ) 40 ) 32 ) ( * v2 12 ) ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":54,"rebuilds":0,"total_time":0.000044458,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( / ( + ( - ( / ( + ( + v0 v1 ) 87 ) 8 ) ( / v1 8 ) ) 44 ) 34 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 87 ) 8 ) ( / v1 8 ) ) 44 ) 34 ) )","chompy_result":{"index":89,"start_expression":"( == ( / ( + ( - ( / ( + ( + v0 v1 ) 87 ) 8 ) ( / v1 8 ) ) 44 ) 34 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 87 ) 8 ) ( / v1 8 ) ) 44 ) 34 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":141,"rebuilds":2,"total_time":0.00040799900000000004,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":89,"start_expression":"( == ( / ( + ( - ( / ( + ( + v0 v1 ) 87 ) 8 ) ( / v1 8 ) ) 44 ) 34 ) ( / ( + ( - ( / ( + ( + v0 v1 ) 87 ) 8 ) ( / v1 8 ) ) 44 ) 34 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":22,"rebuilds":0,"total_time":0.000031292,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( max ( min ( / v0 8 ) 249 ) 0 ) ( * v1 12 ) ) ( + ( max ( min ( / v0 8 ) 249 ) 0 ) ( * v1 12 ) ) )","chompy_result":{"index":90,"start_expression":"( == ( + ( max ( min ( / v0 8 ) 249 ) 0 ) ( * v1 12 ) ) ( + ( max ( min ( / v0 8 ) 249 ) 0 ) ( * v1 12 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":122,"rebuilds":2,"total_time":0.00039025,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":90,"start_expression":"( == ( + ( max ( min ( / v0 8 ) 249 ) 0 ) ( * v1 12 ) ) ( + ( max ( min ( / v0 8 ) 249 ) 0 ) ( * v1 12 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":23,"rebuilds":0,"total_time":0.000037166,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( + ( + ( * v0 -32 ) v1 ) 18 ) v2 ) ( min ( + ( + ( * v0 -32 ) v1 ) 18 ) v2 ) )","chompy_result":{"index":91,"start_expression":"( == ( min ( + ( + ( * v0 -32 ) v1 ) 18 ) v2 ) ( min ( + ( + ( * v0 -32 ) v1 ) 18 ) v2 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":114,"rebuilds":2,"total_time":0.000363293,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":91,"start_expression":"( == ( min ( + ( + ( * v0 -32 ) v1 ) 18 ) v2 ) ( min ( + ( + ( * v0 -32 ) v1 ) 18 ) v2 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":19,"rebuilds":0,"total_time":0.000035209,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( * ( max ( min ( * ( / v0 63 ) 8 ) 285 ) 36 ) 8 ) ( * v1 42 ) ) ( + ( * ( max ( min ( * ( / v0 63 ) 8 ) 285 ) 36 ) 8 ) ( * v1 42 ) ) )","chompy_result":{"index":92,"start_expression":"( == ( + ( * ( max ( min ( * ( / v0 63 ) 8 ) 285 ) 36 ) 8 ) ( * v1 42 ) ) ( + ( * ( max ( min ( * ( / v0 63 ) 8 ) 285 ) 36 ) 8 ) ( * v1 42 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":146,"rebuilds":2,"total_time":0.00039570900000000006,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":92,"start_expression":"( == ( + ( * ( max ( min ( * ( / v0 63 ) 8 ) 285 ) 36 ) 8 ) ( * v1 42 ) ) ( + ( * ( max ( min ( * ( / v0 63 ) 8 ) 285 ) 36 ) 8 ) ( * v1 42 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":30,"rebuilds":0,"total_time":0.000035666,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( * v0 1004 ) ( * ( max ( min ( * ( / v1 63 ) 8 ) 285 ) 36 ) 8 ) ) ( + ( * v0 1004 ) ( * ( max ( min ( * ( / v1 63 ) 8 ) 285 ) 36 ) 8 ) ) )","chompy_result":{"index":93,"start_expression":"( == ( + ( * v0 1004 ) ( * ( max ( min ( * ( / v1 63 ) 8 ) 285 ) 36 ) 8 ) ) ( + ( * v0 1004 ) ( * ( max ( min ( * ( / v1 63 ) 8 ) 285 ) 36 ) 8 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":146,"rebuilds":2,"total_time":0.00038774999999999997,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":93,"start_expression":"( == ( + ( * v0 1004 ) ( * ( max ( min ( * ( / v1 63 ) 8 ) 285 ) 36 ) 8 ) ) ( + ( * v0 1004 ) ( * ( max ( min ( * ( / v1 63 ) 8 ) 285 ) 36 ) 8 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":30,"rebuilds":0,"total_time":0.000033167,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( max ( - 2100 ( max ( * ( + ( * v0 2 ) v1 ) 4 ) 2097 ) ) ( - 97 ( max ( min ( * ( + ( * v0 2 ) v1 ) 4 ) 98 ) 94 ) ) ) ( max ( - 2100 ( max ( * ( + ( * v0 2 ) v1 ) 4 ) 2097 ) ) ( - 97 ( max ( min ( * ( + ( * v0 2 ) v1 ) 4 ) 98 ) 94 ) ) ) )","chompy_result":{"index":94,"start_expression":"( == ( max ( - 2100 ( max ( * ( + ( * v0 2 ) v1 ) 4 ) 2097 ) ) ( - 97 ( max ( min ( * ( + ( * v0 2 ) v1 ) 4 ) 98 ) 94 ) ) ) ( max ( - 2100 ( max ( * ( + ( * v0 2 ) v1 ) 4 ) 2097 ) ) ( - 97 ( max ( min ( * ( + ( * v0 2 ) v1 ) 4 ) 98 ) 94 ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":186,"rebuilds":2,"total_time":0.000476458,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":94,"start_expression":"( == ( max ( - 2100 ( max ( * ( + ( * v0 2 ) v1 ) 4 ) 2097 ) ) ( - 97 ( max ( min ( * ( + ( * v0 2 ) v1 ) 4 ) 98 ) 94 ) ) ) ( max ( - 2100 ( max ( * ( + ( * v0 2 ) v1 ) 4 ) 2097 ) ) ( - 97 ( max ( min ( * ( + ( * v0 2 ) v1 ) 4 ) 98 ) 94 ) ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":44,"rebuilds":0,"total_time":0.000039667,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( * ( / ( min ( + ( * ( min ( + ( * v3 504 ) ( + ( + ( / v2 2 ) ( * ( max ( / v4 504 ) -1 ) 504 ) ) 754 ) ) ( / ( + ( + v1 v2 ) 501 ) 2 ) ) -1 ) ( / ( + ( + v1 v2 ) 485 ) 2 ) ) 496 ) 8 ) 8 ) ( min ( + ( * ( min ( + ( * v3 504 ) ( + ( + ( / v2 2 ) ( * ( max ( / v4 504 ) -1 ) 504 ) ) 754 ) ) ( / ( + ( + v1 v2 ) 501 ) 2 ) ) -1 ) ( / ( + ( + v1 v2 ) 485 ) 2 ) ) 496 ) )","chompy_result":{"index":95,"start_expression":"( == ( * ( / ( min ( + ( * ( min ( + ( * v3 504 ) ( + ( + ( / v2 2 ) ( * ( max ( / v4 504 ) -1 ) 504 ) ) 754 ) ) ( / ( + ( + v1 v2 ) 501 ) 2 ) ) -1 ) ( / ( + ( + v1 v2 ) 485 ) 2 ) ) 496 ) 8 ) 8 ) ( min ( + ( * ( min ( + ( * v3 504 ) ( + ( + ( / v2 2 ) ( * ( max ( / v4 504 ) -1 ) 504 ) ) 754 ) ) ( / ( + ( + v1 v2 ) 501 ) 2 ) ) -1 ) ( / ( + ( + v1 v2 ) 485 ) 2 ) ) 496 ) )","end_expression":"1/0","result":false,"best_expr":"(== (min (- (/ (+ v2 (+ v1 485)) 2) (min (+ (* 504 (max (/ v4 504) -1)) (+ (/ v2 2) (+ (* 504 v3) 754))) (/ (+ v1 (- v2 -501)) 2))) 496) (* 8 (/ (min (- (/ (+ v2 (+ v1 485)) 2) (min (+ (* 504 (max (/ v4 504) -1)) (+ (/ v2 2) (+ (* 504 v3) 754))) (/ (+ v1 (- v2 -501)) 2))) 496) 8)))","class":"../chompy-rules.txt","iterations":5,"egraph_size":3378,"rebuilds":55,"total_time":3.0845222170000026,"stop_reason":"Time Limit : 0.010031375","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":95,"start_expression":"( == ( * ( / ( min ( + ( * ( min ( + ( * v3 504 ) ( + ( + ( / v2 2 ) ( * ( max ( / v4 504 ) -1 ) 504 ) ) 754 ) ) ( / ( + ( + v1 v2 ) 501 ) 2 ) ) -1 ) ( / ( + ( + v1 v2 ) 485 ) 2 ) ) 496 ) 8 ) 8 ) ( min ( + ( * ( min ( + ( * v3 504 ) ( + ( + ( / v2 2 ) ( * ( max ( / v4 504 ) -1 ) 504 ) ) 754 ) ) ( / ( + ( + v1 v2 ) 501 ) 2 ) ) -1 ) ( / ( + ( + v1 v2 ) 485 ) 2 ) ) 496 ) )","end_expression":"1/0","result":false,"best_expr":"(== (\"%\" (+ (max (min (+ (max -504 (- v4 (\"%\" v4 -504))) (+ (* 504 v3) (+ 754 (/ v2 2)))) (/ (+ v2 (+ v1 501)) 2)) (/ (+ v2 (+ v1 -507)) 2)) (/ (+ v1 (+ v2 485)) -2)) 8) (+ (/ (+ v1 (+ v2 485)) -2) (/ (+ v1 (+ v2 485)) 2)))","class":"CaviarAll","iterations":7,"egraph_size":9240,"rebuilds":907,"total_time":3.0725730670000027,"stop_reason":"Time Limit : 0.010041833","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"invalid"},{"expression":"( == ( min ( + ( max ( min ( + v0 v1 ) 1872 ) -127 ) 127 ) v2 ) ( min ( + ( max ( min ( + v0 v1 ) 1872 ) -127 ) 127 ) v2 ) )","chompy_result":{"index":96,"start_expression":"( == ( min ( + ( max ( min ( + v0 v1 ) 1872 ) -127 ) 127 ) v2 ) ( min ( + ( max ( min ( + v0 v1 ) 1872 ) -127 ) 127 ) v2 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":140,"rebuilds":2,"total_time":0.000420791,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":96,"start_expression":"( == ( min ( + ( max ( min ( + v0 v1 ) 1872 ) -127 ) 127 ) v2 ) ( min ( + ( max ( min ( + v0 v1 ) 1872 ) -127 ) 127 ) v2 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":30,"rebuilds":0,"total_time":0.000046375,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( * ( - ( / ( + ( + v0 v1 ) 314 ) 63 ) ( / v1 63 ) ) 2 ) ( + ( * v2 2 ) 1 ) ) ( min ( * ( - ( / ( + ( + v0 v1 ) 314 ) 63 ) ( / v1 63 ) ) 2 ) ( + ( * v2 2 ) 1 ) ) )","chompy_result":{"index":97,"start_expression":"( == ( min ( * ( - ( / ( + ( + v0 v1 ) 314 ) 63 ) ( / v1 63 ) ) 2 ) ( + ( * v2 2 ) 1 ) ) ( min ( * ( - ( / ( + ( + v0 v1 ) 314 ) 63 ) ( / v1 63 ) ) 2 ) ( + ( * v2 2 ) 1 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":183,"rebuilds":2,"total_time":0.00049496,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":97,"start_expression":"( == ( min ( * ( - ( / ( + ( + v0 v1 ) 314 ) 63 ) ( / v1 63 ) ) 2 ) ( + ( * v2 2 ) 1 ) ) ( min ( * ( - ( / ( + ( + v0 v1 ) 314 ) 63 ) ( / v1 63 ) ) 2 ) ( + ( * v2 2 ) 1 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":27,"rebuilds":0,"total_time":0.0000395,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( + ( - v0 ( / ( + ( + v1 v2 ) 15 ) 4 ) ) v3 ) ( + ( - v0 ( / ( + ( + v1 v2 ) 15 ) 4 ) ) v3 ) )","chompy_result":{"index":98,"start_expression":"( == ( + ( - v0 ( / ( + ( + v1 v2 ) 15 ) 4 ) ) v3 ) ( + ( - v0 ( / ( + ( + v1 v2 ) 15 ) 4 ) ) v3 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":139,"rebuilds":2,"total_time":0.00041625,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":98,"start_expression":"( == ( + ( - v0 ( / ( + ( + v1 v2 ) 15 ) 4 ) ) v3 ) ( + ( - v0 ( / ( + ( + v1 v2 ) 15 ) 4 ) ) v3 ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":21,"rebuilds":0,"total_time":0.0000365,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( / ( + ( + v0 v1 ) 15 ) 8 ) ( + v2 11 ) ) ( min ( / ( + ( + v0 v1 ) 15 ) 8 ) ( + v2 11 ) ) )","chompy_result":{"index":99,"start_expression":"( == ( min ( / ( + ( + v0 v1 ) 15 ) 8 ) ( + v2 11 ) ) ( min ( / ( + ( + v0 v1 ) 15 ) 8 ) ( + v2 11 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":133,"rebuilds":2,"total_time":0.000390584,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":99,"start_expression":"( == ( min ( / ( + ( + v0 v1 ) 15 ) 8 ) ( + v2 11 ) ) ( min ( / ( + ( + v0 v1 ) 15 ) 8 ) ( + v2 11 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":18,"rebuilds":0,"total_time":0.000032875,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"},{"expression":"( == ( min ( * v0 125 ) ( - v1 125 ) ) ( min ( * v0 125 ) ( - v1 125 ) ) )","chompy_result":{"index":100,"start_expression":"( == ( min ( * v0 125 ) ( - v1 125 ) ) ( min ( * v0 125 ) ( - v1 125 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"../chompy-rules.txt","iterations":2,"egraph_size":78,"rebuilds":2,"total_time":0.00032525,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"caviar_result":{"index":100,"start_expression":"( == ( min ( * v0 125 ) ( - v1 125 ) ) ( min ( * v0 125 ) ( - v1 125 ) ) )","end_expression":"1/0","result":true,"best_expr":"1","class":"CaviarAll","iterations":1,"egraph_size":14,"rebuilds":0,"total_time":0.000042498999999999994,"stop_reason":"Goal 1 Matched","condition":null,"halide_result":"false","halide_time":0.0},"z3_result":"valid"}]}